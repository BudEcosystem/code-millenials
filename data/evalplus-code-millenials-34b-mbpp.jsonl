{"task_id": "Mbpp/2", "completion": "\ndef similar_elements(list1, list2):\n    return [element for element in list1 if element in list2]\n"}
{"task_id": "Mbpp/3", "completion": "\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n"}
{"task_id": "Mbpp/4", "completion": "\nimport heapq\n\ndef heap_queue_largest(lst, n):\n    return heapq.nlargest(n, lst)\n\nprint(heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3))\n"}
{"task_id": "Mbpp/6", "completion": "\ndef differ_At_One_Bit_Pos(num1, num2):\n    count = 0\n    if num1 < num2:\n        num1, num2 = num2, num1\n    for i in range(num1.bit_length()):\n        bit1 = num1 >> i & 1\n        bit2 = num2 >> i & 1\n        if bit1 != bit2:\n            count += 1\n        if count > 1:\n            return False\n    return count == 1\n\nassert differ_At_One_Bit_Pos(13,9) == True\n"}
{"task_id": "Mbpp/7", "completion": "\ndef find_char_long(s):\n    words = s.split()\n    return [word for word in words if len(word) >= 4]\n"}
{"task_id": "Mbpp/8", "completion": "\ndef square_nums(nums):\n    return [num ** 2 for num in nums]\n"}
{"task_id": "Mbpp/9", "completion": "\ndef find_Rotations(s):\n    length = len(s)\n    for i in range(1, length):\n        if s[i:] + s[:i] == s:\n            return i\n    return length\n"}
{"task_id": "Mbpp/11", "completion": "\ndef remove_Occ(s, ch):\n    s = s.replace(ch, '', 1)  # remove first occurrence\n    s = s[::-1].replace(ch, '', 1)[::-1]  # remove last occurrence\n    return s\n"}
{"task_id": "Mbpp/12", "completion": "\ndef sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n"}
{"task_id": "Mbpp/14", "completion": "\ndef find_Volume(base1, base2, height):\n    return 0.5 * (base1 + base2) * height\n"}
{"task_id": "Mbpp/16", "completion": "\nimport re\n\ndef text_lowercase_underscore(s):\n    return bool(re.fullmatch(r'[a-z]+(_[a-z]+)*', s))\n"}
{"task_id": "Mbpp/17", "completion": "\ndef square_perimeter(side_length):\n    return 4 * side_length\n"}
{"task_id": "Mbpp/18", "completion": "\ndef remove_dirty_chars(str1, str2):\n    return ''.join([char for char in str1 if char not in str2])\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n"}
{"task_id": "Mbpp/19", "completion": "\ndef test_duplicate(arr):\n    if len(arr) == len(set(arr)):\n        return False\n    else:\n        return True\n"}
{"task_id": "Mbpp/20", "completion": "\ndef is_woodall(n):\n    return n % 22 == 0\n"}
{"task_id": "Mbpp/56", "completion": "\ndef check(n):\n    reverse_n = int(str(n)[::-1])\n    return n == reverse_n * 2 - 1\n\nassert check(70) == False\n"}
{"task_id": "Mbpp/57", "completion": "\ndef find_Max_Num(lst):\n    # Convert each digit in the list to a string\n    str_lst = [str(i) for i in lst]\n    # Sort the list in reverse order\n    str_lst.sort(reverse=True)\n    # Join the elements of the list to form a single string\n    result = ''.join(str_lst)\n    # Convert the string to an integer and return it\n    return int(result)\n\n# Test the function\nprint(find_Max_Num([1,2,3]))  # Output: 321\n"}
{"task_id": "Mbpp/58", "completion": "\ndef opposite_Signs(num1, num2):\n    return num1 * num2 < 0\n\n# Test the function\nassert opposite_Signs(1,-2) == True\n"}
{"task_id": "Mbpp/59", "completion": "\ndef is_octagonal(n):\n    return n * (7 * n - 5) // 2\n\nassert is_octagonal(5) == 65\n"}
{"task_id": "Mbpp/61", "completion": "\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += int(s[j])\n            if sum == j - i + 1:\n                count += 1\n    return count\n\n# Test the function\nassert count_Substrings('112112') == 6\n"}
{"task_id": "Mbpp/62", "completion": "\ndef smallest_num(lst):\n    return min(lst)\n"}
{"task_id": "Mbpp/63", "completion": "\ndef max_difference(tuple_list):\n    max_diff = 0\n    for pair in tuple_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n# Test the function\nprint(max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))  # Output: 7\n"}
{"task_id": "Mbpp/64", "completion": "\ndef subject_marks(lst):\n    return sorted(lst, key=lambda x: x[1])\n\nprint(subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]))\n"}
{"task_id": "Mbpp/65", "completion": "\ndef recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if type(i) == list:\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total\n\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n"}
{"task_id": "Mbpp/66", "completion": "\ndef pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Test the function\nassert pos_count([1,-2,3,-4]) == 2\n"}
{"task_id": "Mbpp/67", "completion": "\ndef bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n"}
{"task_id": "Mbpp/68", "completion": "\ndef is_Monotonic(arr):\n    if len(arr) < 2:\n        return True\n    if arr[1] > arr[0]:\n        for i in range(2, len(arr)):\n            if arr[i] < arr[i-1]:\n                return False\n    elif arr[1] < arr[0]:\n        for i in range(2, len(arr)):\n            if arr[i] > arr[i-1]:\n                return False\n    else:\n        return is_Monotonic([x for x in arr if x != arr[0]])\n    return True\n\nassert is_Monotonic([6, 5, 4, 4]) == True\n"}
{"task_id": "Mbpp/69", "completion": "\ndef is_sublist(lst, sublst):\n    n = len(sublst)\n    for i in range(len(lst)):\n        if lst[i:i+n] == sublst:\n            return True\n    return False\n\n# Test\nassert is_sublist([2,4,3,5,7],[3,7])==False\n"}
{"task_id": "Mbpp/70", "completion": "\ndef get_equal(tuples):\n    return len(set(len(tup) for tup in tuples)) == 1\n"}
{"task_id": "Mbpp/71", "completion": "\ndef comb_sort(alist):\n    n = len(alist)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if alist[i] > alist[i + gap]:\n                alist[i], alist[i + gap] = alist[i + gap], alist[i]\n                swapped = True\n    return alist\n"}
{"task_id": "Mbpp/72", "completion": "\ndef dif_Square(n):\n    if n < 0:\n        return False\n    i = 1\n    while i*i <= n:\n        j = int((n + i*i)**0.5)\n        if i*i == n or (j*j - i*i) == n:\n            return True\n        i += 1\n    return False\n\n# Test the function\nassert dif_Square(5) == True\n"}
{"task_id": "Mbpp/74", "completion": "\ndef is_samepatterns(colors, patterns):\n    color_dict = {}\n    pattern_dict = {}\n    for i in range(len(colors)):\n        if colors[i] not in color_dict:\n            color_dict[colors[i]] = patterns[i]\n        else:\n            if color_dict[colors[i]] != patterns[i]:\n                return False\n        if patterns[i] not in pattern_dict:\n            pattern_dict[patterns[i]] = colors[i]\n        else:\n            if pattern_dict[patterns[i]] != colors[i]:\n                return False\n    return True\n\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n"}
{"task_id": "Mbpp/75", "completion": "\ndef find_tuples(tuples_list, k):\n    result = []\n    for t in tuples_list:\n        if all(i % k == 0 for i in t):\n            result.append(t)\n    return result\n"}
{"task_id": "Mbpp/77", "completion": "\ndef is_diff(n):\n    return n % 11 == 0\n\nassert is_diff(12345) == False\n"}
{"task_id": "Mbpp/79", "completion": "\ndef word_len(word):\n    return len(word) % 2 == 1\n"}
{"task_id": "Mbpp/80", "completion": "\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n\nassert tetrahedral_number(5) == 35\n"}
{"task_id": "Mbpp/82", "completion": "\nimport math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)\n"}
{"task_id": "Mbpp/83", "completion": "\ndef get_Char(s):\n    ascii_sum = 0\n    for char in s:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 97)\n\nassert get_Char(\"abc\") == \"f\"\n"}
{"task_id": "Mbpp/84", "completion": "\ndef sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sequence = [0, 1]\n        for i in range(2, n + 1):\n            sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 2]])\n        return sequence[n]\n"}
{"task_id": "Mbpp/85", "completion": "\nimport math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2\n"}
{"task_id": "Mbpp/86", "completion": "\ndef centered_hexagonal_number(n):\n    return n * (2 * n - 1)\n\nassert centered_hexagonal_number(10) == 271\n"}
{"task_id": "Mbpp/87", "completion": "\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n"}
{"task_id": "Mbpp/88", "completion": "\ndef freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict\n\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n"}
{"task_id": "Mbpp/89", "completion": "\ndef closest_num(n):\n    for i in range(n-1, -1, -1):\n        if i < n:\n            return i\n    return None\n\nprint(closest_num(11))  # Output: 10\n"}
{"task_id": "Mbpp/90", "completion": "\ndef len_log(words_list):\n    return max(len(word) for word in words_list)\n\nprint(len_log([\"python\",\"PHP\",\"bigdata\"]))\n"}
{"task_id": "Mbpp/91", "completion": "\ndef find_substring(list_of_strings, substring):\n    for string in list_of_strings:\n        if substring in string:\n            return True\n    return False\n\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n"}
{"task_id": "Mbpp/92", "completion": "\ndef is_undulating(num):\n    str_num = str(num)\n    is_increasing = is_decreasing = True\n    for i in range(len(str_num)-1):\n        if str_num[i] < str_num[i+1]:\n            is_decreasing = False\n        if str_num[i] > str_num[i+1]:\n            is_increasing = False\n    return is_increasing or is_decreasing\n\nassert is_undulating(1212121) == True\n"}
{"task_id": "Mbpp/93", "completion": "\ndef power(a, b):\n    return a ** b\n"}
{"task_id": "Mbpp/94", "completion": "\ndef index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]\n"}
{"task_id": "Mbpp/95", "completion": "\ndef Find_Min_Length(list_of_lists):\n    return min(len(lst) for lst in list_of_lists)\n"}
{"task_id": "Mbpp/96", "completion": "\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test the function\nassert divisor(15) == 4\n"}
{"task_id": "Mbpp/97", "completion": "\ndef frequency_lists(list_of_lists):\n    frequency_dict = {}\n    for lst in list_of_lists:\n        for item in lst:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict\n\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n"}
{"task_id": "Mbpp/98", "completion": "\nimport math\n\ndef multiply_num(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product / len(lst)\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n"}
{"task_id": "Mbpp/99", "completion": "\ndef decimal_to_binary(n):\n    return bin(n)[2:]\n"}
{"task_id": "Mbpp/100", "completion": "\ndef next_smallest_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n"}
{"task_id": "Mbpp/101", "completion": "\ndef kth_element(arr, k):\n    return arr[k-1]\n"}
{"task_id": "Mbpp/102", "completion": "\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)\n\nassert snake_to_camel('python_program')=='PythonProgram'\n"}
{"task_id": "Mbpp/103", "completion": "\ndef eulerian_num(n, m):\n    if m == 0:\n        return 1 if n == 0 else 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m > n:\n        return 0\n    return (n * eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1)) % 1000000007\n\nif __name__ == \"__main__\":\n    assert eulerian_num(3, 1) == 4\n"}
{"task_id": "Mbpp/104", "completion": "\ndef sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]\n"}
{"task_id": "Mbpp/105", "completion": "\ndef count(lst):\n    return sum(lst)\n"}
{"task_id": "Mbpp/106", "completion": "\ndef add_lists(lst, tup):\n    return tup + tuple(lst)\n\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n"}
{"task_id": "Mbpp/108", "completion": "\ndef merge_sorted_list(list1, list2, list3):\n    return sorted(list1 + list2 + list3)\n\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n"}
{"task_id": "Mbpp/109", "completion": "\ndef odd_Equivalent(bin_str, rotations):\n    for _ in range(rotations):\n        bin_str = bin_str[-1] + bin_str[:-1]\n    \n    return sum(int(digit) for digit in bin_str if int(digit) % 2 != 0)\n\nassert odd_Equivalent(\"011001\",6) == 3\n"}
{"task_id": "Mbpp/111", "completion": "\ndef common_in_nested_lists(nested_lists):\n    if len(nested_lists) == 0:\n        return []\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements = common_elements.intersection(set(lst))\n    return list(common_elements)\n"}
{"task_id": "Mbpp/113", "completion": "\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": "Mbpp/115", "completion": "\ndef empty_dit(lst):\n    return all(not d for d in lst)\n"}
{"task_id": "Mbpp/116", "completion": "\ndef tuple_to_int(t):\n    return int(''.join(map(str, t)))\n\nassert tuple_to_int((1,2,3))==123\n"}
{"task_id": "Mbpp/117", "completion": "\ndef list_to_float(lst):\n    return [tuple(float(i) for i in sublist) for sublist in lst]\n\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n"}
{"task_id": "Mbpp/118", "completion": "\ndef string_to_list(s):\n    return s.split()\n"}
{"task_id": "Mbpp/119", "completion": "\ndef search(arr):\n    low = 0\n    high = len(arr) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if mid % 2 == 1:\n            if arr[mid] == arr[mid - 1]:\n                low = mid + 1\n            else:\n                high = mid\n        else:\n            if arr[mid] == arr[mid + 1]:\n                low = mid + 1\n            else:\n                high = mid\n    return arr[low]\n\n# Test the code\nassert search([1,1,2,2,3]) == 3\n"}
{"task_id": "Mbpp/120", "completion": "\ndef max_product_tuple(lst):\n    max_product = 0\n    for tup in lst:\n        product = tup[0] * tup[1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\n"}
{"task_id": "Mbpp/123", "completion": "\ndef amicable_numbers_sum(n):\n    def sum_of_proper_divisors(x):\n        result = 1\n        i = 2\n        while i * i <= x:\n            if x % i:\n                i += 1\n            else:\n                if i * (x // i) == x:\n                    result += i + x // i\n                else:\n                    result += i\n                i += 1\n        return result\n\n    total_sum = 0\n    for i in range(1, n + 1):\n        sum_i = sum_of_proper_divisors(i)\n        if sum_i > i and sum_of_proper_divisors(sum_i) == i:\n            total_sum += i\n    return total_sum\n\n\nassert amicable_numbers_sum(999) == 504\n"}
{"task_id": "Mbpp/124", "completion": "\nimport cmath\nimport math\n\ndef angle_complex(x, y):\n    return cmath.phase(x + y*1j)\n"}
{"task_id": "Mbpp/125", "completion": "\ndef find_length(s):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    start = 0\n    for end in range(len(s)):\n        if s[end] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        while count_0 > count_1:\n            if s[start] == '0':\n                count_0 -= 1\n            else:\n                count_1 -= 1\n            start += 1\n        max_diff = max(max_diff, end - start + 1)\n    return max_diff\n"}
{"task_id": "Mbpp/126", "completion": "\ndef sum_of_common_divisors(x, y):\n    sum = 0\n    for i in range(1, min(x, y) + 1):\n        if x % i == 0 and y % i == 0:\n            sum += i\n    return sum\n\nassert sum_of_common_divisors(10, 15) == 6\n"}
{"task_id": "Mbpp/127", "completion": "\ndef multiply_int(a, b):\n    return a * b\n"}
{"task_id": "Mbpp/128", "completion": "\ndef long_words(n, sentence):\n    words = sentence.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']\n"}
{"task_id": "Mbpp/129", "completion": "\ndef magic_square_test(square):\n    n = len(square)\n    total = sum(square[0])\n\n    for row in square:\n        if sum(row) != total:\n            return False\n\n    for col in range(n):\n        if sum(square[row][col] for row in range(n)) != total:\n            return False\n\n    if sum(square[i][i] for i in range(n)) != total:\n        return False\n\n    if sum(square[i][n - i - 1] for i in range(n)) != total:\n        return False\n\n    return True\n"}
{"task_id": "Mbpp/130", "completion": "\ndef max_occurrences(lst):\n    count_dict = {}\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return max(count_dict, key=count_dict.get)\n"}
{"task_id": "Mbpp/131", "completion": "\ndef reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    i, j = 0, len(s) - 1\n    sr = list(s)\n    while i < j:\n        if sr[i] in vowels:\n            if sr[j] in vowels:\n                sr[i], sr[j] = sr[j], sr[i]\n                i += 1\n                j -= 1\n            else:\n                j -= 1\n        else:\n            i += 1\n    return ''.join(sr)\n\nassert reverse_vowels(\"Python\") == \"Python\"\n"}
{"task_id": "Mbpp/132", "completion": "\ndef tup_string(t):\n    return \"\".join(t)\n"}
{"task_id": "Mbpp/133", "completion": "\ndef sum_negativenum(nums):\n    return sum(i for i in nums if i < 0)\n"}
{"task_id": "Mbpp/135", "completion": "\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n\n# Test the function\nassert hexagonal_num(10) == 190\n"}
{"task_id": "Mbpp/137", "completion": "\nimport math\n\ndef zero_count(arr):\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    return zeroes / non_zeroes\n"}
{"task_id": "Mbpp/138", "completion": "\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    while n > 0:\n        if n & 1:\n            n -= 1\n        else:\n            n >>= 1\n    return n == 0\n\nassert is_Sum_Of_Powers_Of_Two(10) == True\n"}
{"task_id": "Mbpp/139", "completion": "\nimport math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n"}
{"task_id": "Mbpp/140", "completion": "\ndef extract_singly(list_of_lists):\n    return [item for sublist in list_of_lists for item in sublist]\n"}
{"task_id": "Mbpp/141", "completion": "\ndef pancake_sort(arr):\n    n = len(arr)\n    for i in range(n, 0, -2):\n        m = arr.index(max(arr[:i]))\n        if m != i - 1:\n            arr[0:i] = arr[0:i][::-1]\n        if i > 1:\n            arr[0:i-1] = arr[0:i-1][::-1]\n    return arr\n"}
{"task_id": "Mbpp/142", "completion": "\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count\n\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n"}
{"task_id": "Mbpp/143", "completion": "\ndef find_lists(tup):\n    count = 0\n    for item in tup:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# test the function\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n"}
{"task_id": "Mbpp/145", "completion": "\ndef max_Abs_Diff(arr):\n    max_diff = 0\n    min_element = arr[0]\n    for i in range(len(arr)):\n        if arr[i] < min_element:\n            min_element = arr[i]\n        elif arr[i] - min_element > max_diff:\n            max_diff = arr[i] - min_element\n    return max_diff\n\nassert max_Abs_Diff((2,1,5,3)) == 4\n"}
{"task_id": "Mbpp/160", "completion": "\ndef find_solution(a, b, n):\n    if n % (a*b) == 0:\n        x = n // a\n        y = n // b\n        return (x, y)\n    else:\n        return None\n"}
{"task_id": "Mbpp/161", "completion": "\ndef remove_elements(original_list, elements_to_remove):\n    return [x for x in original_list if x not in elements_to_remove]\n"}
{"task_id": "Mbpp/162", "completion": "\ndef sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n\nassert sum_series(6) == 12\n"}
{"task_id": "Mbpp/164", "completion": "\ndef are_equivalent(num1, num2):\n    def sum_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                if n // i == i:\n                    divisors.append(i)\n                else:\n                    divisors.extend([i, n // i])\n        return sum(divisors)\n\n    return sum_divisors(num1) == sum_divisors(num2)\n\n\nassert are_equivalent(36, 57) == False\n"}
{"task_id": "Mbpp/165", "completion": "\ndef count_char_position(s):\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if chr(ord('a') + i) == s[i]:\n            count += 1\n    return count\n\n# Test\nassert count_char_position(\"xbcefg\") == 2\n"}
{"task_id": "Mbpp/166", "completion": "\ndef find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/167", "completion": "\ndef next_power_of_2(n):\n    return 2 ** (n - 1).bit_length()\n\nassert next_power_of_2(0) == 1\n"}
{"task_id": "Mbpp/168", "completion": "\ndef frequency(lst, num):\n    return lst.count(num)\n"}
{"task_id": "Mbpp/170", "completion": "\ndef sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n"}
{"task_id": "Mbpp/171", "completion": "\ndef perimeter_pentagon(side_length):\n    return 5 * side_length\n"}
{"task_id": "Mbpp/172", "completion": "\ndef count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n\n# Testing the function\nassert count_occurance(\"letstdlenstdporstd\") == 3\n"}
{"task_id": "Mbpp/222", "completion": "\ndef check_type(tup):\n    return len(set(map(type, tup))) == 1\n"}
{"task_id": "Mbpp/223", "completion": "\ndef is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False\n\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n"}
{"task_id": "Mbpp/224", "completion": "\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nassert count_Set_Bits(2) == 1\n"}
{"task_id": "Mbpp/226", "completion": "\ndef odd_values_string(s):\n    return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)\n\nassert odd_values_string('abcdef') == 'ace'\n"}
{"task_id": "Mbpp/227", "completion": "\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n\nassert min_of_three(10,20,0)==0\n"}
{"task_id": "Mbpp/229", "completion": "\ndef re_arrange_array(arr, n):\n    sub_arr = arr[:n]\n    negatives = [x for x in sub_arr if x < 0]\n    positives = [x for x in sub_arr if x >= 0]\n    arr[:n] = negatives + positives\n    return arr\n\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n"}
{"task_id": "Mbpp/230", "completion": "\ndef replace_blank(s, c):\n    return s.replace(' ', c)\n"}
{"task_id": "Mbpp/232", "completion": "\ndef larg_nnum(lista, n):\n    return sorted(lista, reverse=True)[:n]\n"}
{"task_id": "Mbpp/233", "completion": "\nimport math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)\n"}
{"task_id": "Mbpp/234", "completion": "\ndef volume_cube(side_length):\n    return side_length ** 3\n"}
{"task_id": "Mbpp/235", "completion": "\ndef even_bit_set_number(n):\n    return n | 0x55555555\n\nassert even_bit_set_number(10) == 10\n"}
{"task_id": "Mbpp/237", "completion": "\ndef check_occurences(lst):\n    count_dict = {}\n    for tup in lst:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        elif tup[::-1] in count_dict:\n            count_dict[tup[::-1]] += 1\n        else:\n            count_dict[tup] = 1\n    return {k: v for k, v in count_dict.items() if v > 1}\n\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n"}
{"task_id": "Mbpp/238", "completion": "\ndef number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if string[i:j]:\n                count += 1\n    return count\n\nassert number_of_substrings(\"abc\") == 6\n"}
{"task_id": "Mbpp/239", "completion": "\ndef get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    total = 0\n    for i in range(2, m+1):\n        total += get_total_number_of_sequences(i-1, n-1)\n    return total\n"}
{"task_id": "Mbpp/240", "completion": "\ndef replace_list(list1, list2):\n    # Replace the last element of list1 with list2\n    list1[-1] = list2\n    return list1\n\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n"}
{"task_id": "Mbpp/242", "completion": "\ndef count_charac(s):\n    return len(s)\n"}
{"task_id": "Mbpp/244", "completion": "\ndef next_Perfect_Square(n):\n    i = n + 1\n    while True:\n        if i * i > n:\n            return i * i\n        i += 1\n"}
{"task_id": "Mbpp/245", "completion": "\ndef max_sum(arr):\n    if not arr:\n        return 0\n\n    n = len(arr)\n\n    # dp[i] will store the maximum sum of a bitonic subsequence ending at index i\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    # find maximum sum of increasing subsequence ending at each index\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + arr[i], arr[i])\n\n    max_sum = dp[-1]\n\n    # find maximum sum of decreasing subsequence ending at each index\n    for i in range(n-2, -1, -1):\n        max_sum = max(max_sum, dp[i] + sum(arr[i+1:]))\n\n    return max_sum\n\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n"}
{"task_id": "Mbpp/247", "completion": "\ndef lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]\n\nassert lps(\"TENS FOR TENS\") == 5\n"}
{"task_id": "Mbpp/249", "completion": "\ndef intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n"}
{"task_id": "Mbpp/250", "completion": "\ndef count_X(tup, x):\n    return tup.count(x)\n\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n"}
{"task_id": "Mbpp/251", "completion": "\ndef insert_element(lst, element):\n    result = []\n    for item in lst:\n        result += [element, item]\n    return result\n\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n"}
{"task_id": "Mbpp/252", "completion": "\nimport cmath\n\ndef convert(c):\n    r = abs(c)\n    phi = cmath.phase(c)\n    return (r, phi)\n"}
{"task_id": "Mbpp/253", "completion": "\ndef count_integer(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count\n\nassert count_integer([1,2,'abc',1.2]) == 2\n"}
{"task_id": "Mbpp/255", "completion": "\nfrom itertools import product\n\ndef combinations_colors(my_list, n):\n    return list(product(my_list, repeat=n))\n"}
{"task_id": "Mbpp/256", "completion": "\ndef count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = [True for _ in range(n)]\n    p = 2\n    while (p * p <= n):\n        if (primes[p] == True):\n            for i in range(p * p, n, p):\n                primes[i] = False\n        p += 1\n    return sum(primes)\n\nassert count_Primes_nums(5) == 2\n"}
{"task_id": "Mbpp/257", "completion": "\ndef swap_numbers(a, b):\n    return (b, a)\n"}
{"task_id": "Mbpp/259", "completion": "\ndef maximize_elements(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append((max(t1[i][0], t2[i][0]), max(t1[i][1], t2[i][1])))\n    return tuple(result)\n\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n"}
{"task_id": "Mbpp/260", "completion": "\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += w\n        w = 6 - w\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1\n\nassert newman_prime(3) == 7\n"}
{"task_id": "Mbpp/261", "completion": "\ndef division_elements(t1, t2):\n    return tuple(i/j for i, j in zip(t1, t2))\n\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n"}
{"task_id": "Mbpp/262", "completion": "\ndef split_two_parts(lst, L):\n    return lst[:L], lst[L:]\n"}
{"task_id": "Mbpp/264", "completion": "\ndef dog_age(human_years):\n    return human_years * 7\n"}
{"task_id": "Mbpp/265", "completion": "\ndef list_split(lst, n):\n    return [lst[i::n] for i in range(n)]\n\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n"}
{"task_id": "Mbpp/266", "completion": "\ndef lateralsurface_cube(side_length):\n    return 4 * side_length ** 2\n"}
{"task_id": "Mbpp/267", "completion": "\ndef square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_of_squares += i**2\n    return sum_of_squares\n\nassert square_Sum(2) == 10\n"}
{"task_id": "Mbpp/268", "completion": "\ndef find_star_num(n):\n    if n == 1:\n        return 9\n    elif n == 2:\n        return 37\n    elif n == 3:\n        return 109\n    elif n == 4:\n        return 362\n    elif n == 5:\n        return 1351\n    elif n == 6:\n        return 4565\n    elif n == 7:\n        return 13001\n    elif n == 8:\n        return 4565\n    elif n == 9:\n        return 13001\n    elif n == 10:\n        return 4565\n    elif n == 11:\n        return 13001\n    elif n == 12:\n        return 4565\n    elif n == 13:\n        return 13001\n    elif n == 14:\n        return 4565\n    elif n == 15:\n        return 13001\n    elif n == 16:\n        return 4565\n    elif n == 17:\n        return 13001\n    elif n == 18:\n        return 4565\n    elif n == 19:\n        return 13001\n    elif n == 20:\n        return 4565\n    elif n == 21:\n        return 13001\n    elif n == 22:\n        return 4565\n    elif n == 23:\n        return 13001\n    elif n == 24:\n        return 4565\n    elif n == 25:\n        return 13001\n    elif n == 26:\n        return 4565\n    elif n == 27:\n        return 13001\n    elif n == 28:\n        return 4565\n    elif n == 29:\n        return 13001\n    elif n == 30:\n        return "}
{"task_id": "Mbpp/269", "completion": "\ndef ascii_value(char):\n    return ord(char)\n"}
{"task_id": "Mbpp/270", "completion": "\ndef sum_even_and_even_index(lst):\n    return sum(val for ind, val in enumerate(lst) if ind % 2 == 0 and val % 2 == 0)\n"}
{"task_id": "Mbpp/271", "completion": "\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum\n\nprint(even_Power_Sum(2)) # Output: 1056\n"}
{"task_id": "Mbpp/272", "completion": "\ndef rear_extract(list_of_tuples):\n    return [t[-1] for t in list_of_tuples]\n"}
{"task_id": "Mbpp/273", "completion": "\ndef substract_elements(t1, t2):\n    return tuple(i - j for i, j in zip(t1, t2))\n"}
{"task_id": "Mbpp/274", "completion": "\nfrom math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for k in range(0, n+1, 2):\n        sum += comb(n, k)\n    return sum\n\nassert even_binomial_Coeff_Sum(4) == 8\n"}
{"task_id": "Mbpp/276", "completion": "\nimport math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height\n"}
{"task_id": "Mbpp/277", "completion": "\ndef dict_filter(dict_obj, n):\n    return {k: v for k, v in dict_obj.items() if v >= n}\n\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n"}
{"task_id": "Mbpp/278", "completion": "\ndef count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3\n"}
{"task_id": "Mbpp/279", "completion": "\ndef is_num_decagonal(n):\n    return n*(9*n-7)//2\n"}
{"task_id": "Mbpp/280", "completion": "\ndef sequential_search(arr, ele):\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return (True, i)\n    return (False, -1)\n\nprint(sequential_search([11,23,58,31,56,77,43,12,65,19],31)) # (True, 3)\n"}
{"task_id": "Mbpp/281", "completion": "\ndef all_unique(lst):\n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/282", "completion": "\ndef sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]\n"}
{"task_id": "Mbpp/283", "completion": "\ndef validate(n):\n    frequency = {}\n    while n > 0:\n        digit = n % 10\n        if digit not in frequency:\n            frequency[digit] = 1\n        else:\n            frequency[digit] += 1\n        n = n // 10\n\n    for key, value in frequency.items():\n        if key < value:\n            return False\n    return True\n\nassert validate(1234) == True\n"}
{"task_id": "Mbpp/284", "completion": "\ndef check_element(lst, element):\n    return all(i == element for i in lst)\n"}
{"task_id": "Mbpp/285", "completion": "\nimport re\n\ndef text_match_two_three(text):\n    pattern = \"ab{2,3}\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/286", "completion": "\ndef max_sub_array_sum_repeated(nums, k, n):\n    if not nums:\n        return 0\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(k):\n        for j in range(n):\n            current_sum += nums[j]\n            max_sum = max(max_sum, current_sum)\n            if current_sum < 0:\n                current_sum = 0\n    return max_sum\n\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n"}
{"task_id": "Mbpp/287", "completion": "\ndef square_Sum(n):\n    sum_squares = 0\n    for i in range(1, 2*n+1, 2):\n        sum_squares += i**2\n    return sum_squares\n\nassert square_Sum(2) == 20\n"}
{"task_id": "Mbpp/290", "completion": "\ndef max_length(list_of_lists):\n    max_len = 0\n    max_list = []\n    for l in list_of_lists:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_list = l\n    return max_len, max_list\n"}
{"task_id": "Mbpp/292", "completion": "\ndef find(a, b):\n    return a // b\n"}
{"task_id": "Mbpp/293", "completion": "\nimport math\n\ndef otherside_rightangle(a, b):\n    c = math.sqrt(a**2 + b**2)\n    return c\n"}
{"task_id": "Mbpp/294", "completion": "\ndef max_val(lst):\n    max_val = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_val is None or item > max_val:\n                max_val = item\n    return max_val\n"}
{"task_id": "Mbpp/295", "completion": "\ndef sum_div(n):\n    sum_divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors\n\nassert sum_div(8)==7\n"}
{"task_id": "Mbpp/296", "completion": "\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr, 0\n\n    mid = len(arr) // 2\n    left_half, left_inv = merge_sort(arr[:mid])\n    right_half, right_inv = merge_sort(arr[mid:])\n\n    merged, split_inv = merge(left_half, right_half)\n\n    return merged, left_inv + right_inv + split_inv\n\ndef merge(left, right):\n    merged = []\n    i = j = inv_count = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            inv_count += len(left) - i\n            j += 1\n\n    while i < len(left):\n        merged.append(left[i])\n        i += 1\n\n    while j < len(right):\n        merged.append(right[j])\n        j += 1\n\n    return merged, inv_count\n\ndef get_Inv_Count(arr):\n    _, inv_count = merge_sort(arr)\n    return inv_count\n\nassert get_Inv_Count([1,20,6,4,5]) == 5\n"}
{"task_id": "Mbpp/297", "completion": "\ndef flatten_list(nested_list):\n    flat_list = []\n    for i in nested_list:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n\n# test\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n"}
{"task_id": "Mbpp/299", "completion": "\ndef max_aggregate(data):\n    aggregate_dict = {}\n    for name, score in data:\n        if name in aggregate_dict:\n            aggregate_dict[name] += score\n        else:\n            aggregate_dict[name] = score\n    max_name = max(aggregate_dict, key=aggregate_dict.get)\n    return (max_name, aggregate_dict[max_name])\n\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n"}
{"task_id": "Mbpp/300", "completion": "\nimport math\n\ndef count_binary_seq(n):\n    return 2**(2*n)\n\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n"}
{"task_id": "Mbpp/301", "completion": "\ndef dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n"}
{"task_id": "Mbpp/305", "completion": "\ndef start_withp(words_list):\n    for words in words_list:\n        word1, word2 = words.split()\n        if word1.startswith('p') and word2.startswith('p'):\n            return (word1, word2)\n        elif word1.startswith('p'):\n            return (word1,)\n        elif word2.startswith('p'):\n            return (word2,)\n    return ()\n\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n"}
{"task_id": "Mbpp/306", "completion": "\ndef max_sum_increasing_subseq(arr, i, k, n):\n    dp = [0]*n\n    dp[i] = arr[i]\n    for j in range(i+1, n):\n        if j == k:\n            dp[j] = max(dp[j-1], dp[j-2] + arr[j])\n        else:\n            dp[j] = max(dp[j-1], dp[j-2] + arr[j])\n    return dp[n-1]\n"}
{"task_id": "Mbpp/308", "completion": "\ndef large_product(list1, list2, n):\n    product_list = [a*b for a in list1 for b in list2]\n    product_list.sort(reverse=True)\n    return product_list[:n]\n\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n"}
{"task_id": "Mbpp/309", "completion": "\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\n# Test the function\nassert maximum(5,10) == 10\n"}
{"task_id": "Mbpp/310", "completion": "\ndef string_to_tuple(s):\n    return tuple(s)\n\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n"}
{"task_id": "Mbpp/311", "completion": "\ndef set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    else:\n        return n | (n + 1)\n\nassert set_left_most_unset_bit(10) == 14\n"}
{"task_id": "Mbpp/312", "completion": "\nimport math\n\ndef volume_cone(radius: float, height: float) -> float:\n    return (1/3) * math.pi * radius**2 * height\n"}
{"task_id": "Mbpp/388", "completion": "\ndef highest_Power_of_2(n):\n    return 2**(n.bit_length()-1)\n\nassert highest_Power_of_2(10) == 8\n"}
{"task_id": "Mbpp/389", "completion": "\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_numbers = [2, 1]\n        for i in range(2, n + 1):\n            lucas_numbers.append(lucas_numbers[i - 1] + lucas_numbers[i - 2])\n        return lucas_numbers[n]\n\nassert find_lucas(9) == 76\n"}
{"task_id": "Mbpp/390", "completion": "\ndef add_string(lst, s):\n    return [s.format(i) for i in lst]\n\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n"}
{"task_id": "Mbpp/391", "completion": "\ndef convert_list_dictionary(list1, list2, list3):\n    return [dict([(list1[i], {list2[i]: list3[i]})]) for i in range(len(list1))]\n\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n"}
{"task_id": "Mbpp/392", "completion": "\ndef get_max_sum(n):\n    dp = [0]*(n+1)\n    for i in range(2, n+1):\n        dp[i] = max(dp[i-1], dp[i//2] + dp[i//3] + dp[i//4] + dp[i//5])\n    return dp[n]\n\n# Test the function\nassert get_max_sum(60) == 106\n"}
{"task_id": "Mbpp/394", "completion": "\ndef check_distinct(tup):\n    return len(tup) == len(set(tup))\n"}
{"task_id": "Mbpp/395", "completion": "\ndef first_non_repeating_character(s):\n    char_count = {}\n    \n    # Count occurrences of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find first non-repeated character\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character exists\n    return None\n"}
{"task_id": "Mbpp/396", "completion": "\ndef check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n"}
{"task_id": "Mbpp/397", "completion": "\ndef median_numbers(num1, num2, num3):\n    return sorted([num1, num2, num3])[1]\n\nassert median_numbers(25,55,65)==55.0\n"}
{"task_id": "Mbpp/398", "completion": "\ndef sum_of_digits(numbers):\n    result = 0\n    for number in numbers:\n        while number > 0:\n            result += number % 10\n            number //= 10\n    return result\n\nassert sum_of_digits([10,2,56])==14\n"}
{"task_id": "Mbpp/400", "completion": "\ndef extract_freq(list_of_tuples):\n    return len(set(list_of_tuples))\n"}
{"task_id": "Mbpp/404", "completion": "\ndef minimum(a, b):\n    return a if a < b else b\n"}
{"task_id": "Mbpp/405", "completion": "\ndef check_tuplex(tuplex, element):\n    return element in tuplex\n"}
{"task_id": "Mbpp/406", "completion": "\ndef find_Parity(n):\n    return n % 2 != 0\n"}
{"task_id": "Mbpp/407", "completion": "\ndef rearrange_bigger(n):\n    num_str = str(n)\n    sorted_num_str = ''.join(sorted(num_str, reverse=True))\n    if sorted_num_str == num_str:\n        return -1\n    else:\n        return int(sorted_num_str)\n\nassert rearrange_bigger(12)==21\n"}
{"task_id": "Mbpp/409", "completion": "\ndef min_product_tuple(list_of_tuples):\n    return min(a*b for a, b in list_of_tuples)\n\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n"}
{"task_id": "Mbpp/410", "completion": "\ndef min_val(lst):\n    min_val = None\n    for i in lst:\n        if type(i) == int or type(i) == float:\n            if min_val is None or i < min_val:\n                min_val = i\n    return min_val\n"}
{"task_id": "Mbpp/412", "completion": "\ndef remove_odd(nums):\n    return [num for num in nums if num % 2 == 0]\n"}
{"task_id": "Mbpp/413", "completion": "\ndef extract_nth_element(list_of_tuples, n):\n    return [t[n] for t in list_of_tuples]\n\n# Test the function\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n"}
{"task_id": "Mbpp/414", "completion": "\ndef overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\n\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n"}
{"task_id": "Mbpp/415", "completion": "\ndef max_Product(arr):\n    max1 = max(arr)\n    arr.remove(max1)\n    max2 = max(arr)\n    return (max1,max2)\n\nprint(max_Product([1,2,3,4,7,0,8,4]))\n"}
{"task_id": "Mbpp/418", "completion": "\ndef Find_Max(lst):\n    return max(lst, key=len)\n\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n"}
{"task_id": "Mbpp/419", "completion": "\ndef round_and_sum(numbers):\n    rounded_numbers = [round(number) for number in numbers]\n    sum_of_numbers = sum(rounded_numbers)\n    return sum_of_numbers * len(numbers)\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n"}
{"task_id": "Mbpp/420", "completion": "\ndef cube_Sum(n):\n    sum = 0\n    count = 0\n    num = 1\n    while count < n:\n        if num % 2 == 0:\n            sum += num ** 3\n            count += 1\n        num += 1\n    return sum\n\nassert cube_Sum(2) == 72\n"}
{"task_id": "Mbpp/421", "completion": "\ndef concatenate_tuple(tup):\n    delimiter = '-'\n    return delimiter.join(str(i) for i in tup)\n\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\n"}
{"task_id": "Mbpp/422", "completion": "\ndef find_Average_Of_Cube(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    return sum_of_cubes / n\n"}
{"task_id": "Mbpp/424", "completion": "\ndef extract_rear(tup):\n    return [s[-1] for s in tup]\n\nprint(extract_rear(('Mers', 'for', 'Vers')))  # Output: ['s', 'r', 's']\n"}
{"task_id": "Mbpp/425", "completion": "\ndef count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n"}
{"task_id": "Mbpp/426", "completion": "\ndef filter_oddnumbers(lst):\n    return [num for num in lst if num % 2 != 0]\n"}
{"task_id": "Mbpp/427", "completion": "\ndef change_date_format(date):\n    parts = date.split('-')\n    return f'{parts[2]}-{parts[1]}-{parts[0]}'\n\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n"}
{"task_id": "Mbpp/428", "completion": "\ndef shell_sort(alist):\n    sublistcount = len(alist)//2\n    while sublistcount > 0:\n\n      for start in range(sublistcount):\n        gap_insertion_sort(alist,start,sublistcount)\n\n      sublistcount = sublistcount // 2\n\n    return alist\n\ndef gap_insertion_sort(alist,start,gap):\n    for i in range(start+gap,len(alist),gap):\n\n        current_value = alist[i]\n        position = i\n\n        while position>=gap and alist[position-gap]>current_value:\n            alist[position]=alist[position-gap]\n            position = position-gap\n\n        alist[position]=current_value\n\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n"}
{"task_id": "Mbpp/429", "completion": "\ndef and_tuples(t1, t2):\n    return tuple(x & y for x, y in zip(t1, t2))\n\n# Test the function\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n"}
{"task_id": "Mbpp/430", "completion": "\ndef parabola_directrix(a,b,c):\n    # y = ax^2 + bx + c, where a is not equal to zero.\n    # The directrix is given by y = -b/2a\n    return -b/(2*a)\n"}
{"task_id": "Mbpp/431", "completion": "\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n"}
{"task_id": "Mbpp/432", "completion": "\ndef median_trapezium(a, b, c):\n    return (a + b + c) / 2\n"}
{"task_id": "Mbpp/433", "completion": "\ndef check_greater(arr, num):\n    for element in arr:\n        if element > num:\n            return True\n    return False\n\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n"}
{"task_id": "Mbpp/435", "completion": "\ndef last_Digit(n):\n    return n % 10\n"}
{"task_id": "Mbpp/436", "completion": "\ndef neg_nos(lst):\n    return [num for num in lst if num < 0]\n"}
{"task_id": "Mbpp/437", "completion": "\ndef remove_odd(str1):\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n\nprint(remove_odd(\"python\"))\n"}
{"task_id": "Mbpp/438", "completion": "\ndef count_bidirectional(tuples):\n    bidirectional_count = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if (tuples[i][0] == tuples[j][1] and tuples[i][1] == tuples[j][0]):\n                bidirectional_count += 1\n    return bidirectional_count\n\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n"}
{"task_id": "Mbpp/439", "completion": "\ndef multiple_to_single(lst):\n    return int(''.join(map(str, lst)))\n\nassert multiple_to_single([11, 33, 50])==113350\n"}
{"task_id": "Mbpp/440", "completion": "\nimport re\n\ndef find_adverb_position(sentence):\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if re.match(r'^\\w+ly$', word):\n            start_pos = sentence.index(word)\n            end_pos = start_pos + len(word) - 1\n            return (i, start_pos, word)\n    return None\n"}
{"task_id": "Mbpp/441", "completion": "\ndef surfacearea_cube(side_length):\n    return 6 * (side_length ** 2)\n"}
{"task_id": "Mbpp/442", "completion": "\ndef positive_count(arr):\n    pos, neg, zero = 0, 0, 0\n    size = len(arr)\n    for i in range(size):\n        if arr[i] > 0:\n            pos += 1\n        elif arr[i] < 0:\n            neg += 1\n        else:\n            zero += 1\n    return pos / (pos + neg + zero)\n\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n"}
{"task_id": "Mbpp/445", "completion": "\ndef index_multiplication(t1, t2):\n    result = []\n    for a, b in zip(t1, t2):\n        result.append((a[0]*b[0], a[1]*b[1]))\n    return tuple(result)\n\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n"}
{"task_id": "Mbpp/446", "completion": "\ndef count_Occurrence(tup, list):\n    count = 0\n    for i in list:\n        count += tup.count(i)\n    return count\n\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n"}
{"task_id": "Mbpp/447", "completion": "\ndef cube_nums(nums):\n    return [num**3 for num in nums]\n"}
{"task_id": "Mbpp/448", "completion": "\ndef perrin(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 7\n    else:\n        return perrin(n - 1) + perrin(n - 2)\n\ndef cal_sum(n):\n    sum = 0\n    for i in range(n):\n        sum += perrin(i)\n    return sum\n\nassert cal_sum(9) == 49\n"}
{"task_id": "Mbpp/450", "completion": "\ndef extract_string(input_list, size):\n    result = [item for item in input_list if len(item) == size]\n    return result\n"}
{"task_id": "Mbpp/451", "completion": "\ndef remove_whitespaces(str):\n    return str.replace(\" \", \"\")\n"}
{"task_id": "Mbpp/453", "completion": "\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n\nassert sumofFactors(18) == 26\n"}
{"task_id": "Mbpp/454", "completion": "\ndef text_match_wordz(text):\n    words = text.split()\n    for word in words:\n        if 'z' in word:\n            return True\n    return False\n\nassert text_match_wordz(\"pythonz.\")==True\n"}
{"task_id": "Mbpp/455", "completion": "\ndef check_monthnumb_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/456", "completion": "\ndef reverse_string_list(colors):\n    return [color[::-1] for color in colors]\n"}
{"task_id": "Mbpp/457", "completion": "\ndef Find_Min(lst):\n    return min(lst, key=len)\n\nprint(Find_Min([[1],[1,2],[1,2,3]]))  # Output: [1]\n"}
{"task_id": "Mbpp/458", "completion": "\ndef rectangle_area(length, width):\n    return length * width\n"}
{"task_id": "Mbpp/459", "completion": "\ndef remove_uppercase(s):\n    return ''.join(c for c in s if not c.isupper())\n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n"}
{"task_id": "Mbpp/460", "completion": "\ndef Extract(lst):\n    return [sublist[0] for sublist in lst]\n\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n"}
{"task_id": "Mbpp/461", "completion": "\ndef upper_ctr(string):\n    ctr = 0\n    for char in string:\n        if char.isupper():\n            ctr += 1\n    return ctr\n\n# Testing the function\nassert upper_ctr('PYthon') == 1\n"}
{"task_id": "Mbpp/462", "completion": "\ndef combinations_list(lst):\n    result = []\n    for i in range(2**len(lst)):\n        result.append([lst[j] for j in range(len(lst)) if (i & (1 << j))])\n    return result\n"}
{"task_id": "Mbpp/463", "completion": "\ndef max_subarray_product(arr):\n    n = len(arr)\n    max_end_here = max_end_so_far = 1\n    min_end_here = min_end_so_far = 1\n    max_product_subarray = float('-inf')\n\n    for i in range(n):\n        if arr[i] > 0:\n            max_end_here *= arr[i]\n            min_end_here = min(min_end_here * arr[i], 1)\n        elif arr[i] == 0:\n            max_end_here = 1\n            min_end_here = 1\n        else:\n            temp = max_end_here\n            max_end_here = max(min_end_here * arr[i], 1)\n            min_end_here = temp * arr[i]\n\n        max_end_so_far = max(max_end_so_far, max_end_here)\n        min_end_so_far = min(min_end_so_far, min_end_here)\n\n        max_product_subarray = max(max_product_subarray, max_end_so_far)\n\n    return max_product_subarray\n"}
{"task_id": "Mbpp/465", "completion": "\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n"}
{"task_id": "Mbpp/468", "completion": "\ndef max_product(nums):\n    if not nums:\n        return 0\n    max_ending_here = nums[0]\n    min_ending_here = nums[0]\n    max_so_far = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] > 0:\n            max_ending_here = max(nums[i], max_ending_here * nums[i])\n            min_ending_here = min(nums[i], min_ending_here * nums[i])\n        else:\n            temp = max_ending_here\n            max_ending_here = max(nums[i], min_ending_here * nums[i])\n            min_ending_here = temp * nums[i]\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"}
{"task_id": "Mbpp/470", "completion": "\ndef add_pairwise(numbers):\n    return tuple(x + y for x, y in zip(numbers, numbers[1:]))\n\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n"}
{"task_id": "Mbpp/471", "completion": "\ndef find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n"}
{"task_id": "Mbpp/472", "completion": "\ndef check_Consecutive(lst):\n    return all(lst[i] + 1 == lst[i + 1] for i in range(len(lst) - 1))\n\nassert check_Consecutive([1,2,3,4,5]) == True\n"}
{"task_id": "Mbpp/473", "completion": "\ndef tuple_intersection(t1, t2):\n    set1 = set(t1)\n    set2 = set(t2)\n    return set1.intersection(set2)\n"}
{"task_id": "Mbpp/474", "completion": "\ndef replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)\n"}
{"task_id": "Mbpp/475", "completion": "\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)\n"}
{"task_id": "Mbpp/476", "completion": "\ndef big_sum(arr):\n    if len(arr) == 0:\n        return 0\n    min_val = arr[0]\n    max_val = arr[0]\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return min_val + max_val\n"}
{"task_id": "Mbpp/477", "completion": "\ndef is_lower(s):\n    return s.lower()\n\n# Test the function\nassert is_lower(\"InValid\") == \"invalid\"\n"}
{"task_id": "Mbpp/478", "completion": "\ndef remove_lowercase(s):\n    return ''.join(c for c in s if c.isupper())\n\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n"}
{"task_id": "Mbpp/479", "completion": "\ndef first_Digit(n):\n    while n >= 10:\n        n //= 10\n    return n\n"}
{"task_id": "Mbpp/554", "completion": "\ndef Split(lst):\n    return [x for x in lst if x % 2 != 0]\n"}
{"task_id": "Mbpp/555", "completion": "\ndef difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum([i for i in range(1, n+1)])\n    \n    # Return the difference\n    return sum_of_cubes - sum_of_numbers\n\n# Test the function\nassert difference(3) == 30\n"}
{"task_id": "Mbpp/556", "completion": "\ndef find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(0,32):\n        cnt = 0\n        for j in range(0,len(arr)):\n            if((arr[j] & (1 << i))):\n               cnt += 1\n        count += cnt*(cnt-1)//2\n    return count\n\n# Test the function\nprint(find_Odd_Pair([5,4,7,2,1],5)) # Output: 6\n"}
{"task_id": "Mbpp/557", "completion": "\ndef toggle_string(s):\n    return s.swapcase()\n\nassert toggle_string(\"Python\")==(\"pYTHON\")\n"}
{"task_id": "Mbpp/558", "completion": "\ndef digit_distance_nums(num1, num2):\n    return sum(abs(int(a) - int(b)) for a, b in zip(str(num1), str(num2)))\n\nassert digit_distance_nums(1,2) == 1\n"}
{"task_id": "Mbpp/559", "completion": "\ndef max_sub_array_sum(nums, k):\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n\nprint(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8))\n"}
{"task_id": "Mbpp/560", "completion": "\ndef union_elements(t1, t2):\n    return tuple(sorted(set(t1) | set(t2)))\n\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n"}
{"task_id": "Mbpp/562", "completion": "\ndef Find_Max_Length(list):\n    max_length = 0\n    for sublist in list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\nprint(Find_Max_Length([[1],[1,4],[5,6,7,8]])) # Output: 4\n"}
{"task_id": "Mbpp/563", "completion": "\nimport re\n\ndef extract_values(string):\n    return re.findall(r'\"(.*?)\"', string)\n\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n"}
{"task_id": "Mbpp/564", "completion": "\ndef count_Pairs(nums, k):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] != nums[j]:\n                count += 1\n    return k * count\n\n# Test the function\nassert count_Pairs([1,2,1],3) == 2\n"}
{"task_id": "Mbpp/565", "completion": "\ndef split(string):\n    return list(string)\n"}
{"task_id": "Mbpp/566", "completion": "\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n"}
{"task_id": "Mbpp/567", "completion": "\ndef issort_list(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n"}
{"task_id": "Mbpp/568", "completion": "\ndef empty_list(N):\n    return [{} for _ in range(N)]\n"}
{"task_id": "Mbpp/569", "completion": "\ndef sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]\n"}
{"task_id": "Mbpp/572", "completion": "\ndef two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n"}
{"task_id": "Mbpp/573", "completion": "\ndef unique_product(lst):\n    unique_lst = list(set(lst))\n    product = 1\n    for num in unique_lst:\n        product *= num\n    return product\n\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n"}
{"task_id": "Mbpp/574", "completion": "\nimport math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)\n"}
{"task_id": "Mbpp/576", "completion": "\ndef is_Sub_Array(l1, l2):\n    n1 = len(l1)\n    n2 = len(l2)\n    for i in range(n1 - n2 + 1):\n        if l1[i:i+n2] == l2:\n            return True\n    return False\n\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n"}
{"task_id": "Mbpp/577", "completion": "\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return factorial(n)%10\n        \ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(last_Digit_Factorial(4))\n"}
{"task_id": "Mbpp/578", "completion": "\ndef interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n"}
{"task_id": "Mbpp/579", "completion": "\ndef find_dissimilar(tup1, tup2):\n    return tuple(set(tup1) ^ set(tup2))\n\nprint(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)))\n"}
{"task_id": "Mbpp/580", "completion": "\ndef extract_even(lst):\n    new_lst = []\n    for i in lst:\n        if type(i) == tuple:\n            new_lst.append(extract_even(i))\n        elif i % 2 == 0:\n            new_lst.append(i)\n    return tuple(new_lst)\n"}
{"task_id": "Mbpp/581", "completion": "\ndef surface_Area(edge, height):\n    base = edge * edge\n    area = 0.5 * base * height\n    return area\n"}
{"task_id": "Mbpp/582", "completion": "\ndef my_dict(d):\n    if isinstance(d, dict) and len(d) == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/583", "completion": "\ndef catalan_number(n):\n    if n <= 1:\n        return 1\n\n    catalan = [0 for _ in range(n + 1)]\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]\n\nassert catalan_number(10)==16796\n"}
{"task_id": "Mbpp/585", "completion": "\ndef expensive_items(data, n):\n    # Sort the data based on price in descending order\n    sorted_data = sorted(data, key=lambda x: x['price'], reverse=True)\n    # Return the first n items\n    return sorted_data[:n]\n"}
{"task_id": "Mbpp/586", "completion": "\ndef split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n\nprint(split_Arr([12,10,5,6,52,36],2)) # [5,6,52,36,12,10]\n"}
{"task_id": "Mbpp/587", "completion": "\ndef list_tuple(lst):\n    return tuple(lst)\n"}
{"task_id": "Mbpp/588", "completion": "\ndef big_diff(arr):\n    if len(arr) == 0:\n        return 0\n    min_val = arr[0]\n    max_val = arr[0]\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    return max_val - min_val\n"}
{"task_id": "Mbpp/589", "completion": "\ndef perfect_squares(start, end):\n    return [i**2 for i in range(start, int(end**0.5)+1) if i**2 <= end]\n"}
{"task_id": "Mbpp/590", "completion": "\nimport cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, y.real), (x.imag, y.imag)\n"}
{"task_id": "Mbpp/591", "completion": "\ndef swap_List(lst):\n    # Check if list is empty\n    if len(lst) == 0:\n        return lst\n\n    # Interchange the first and last elements\n    lst[0], lst[-1] = lst[-1], lst[0]\n\n    return lst\n\n# Test\nprint(swap_List([12, 35, 9, 56, 24]))  # Output: [24, 35, 9, 56, 12]\n"}
{"task_id": "Mbpp/592", "completion": "\nfrom math import comb\n\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(n):\n        sum += comb(n, i) * comb(n, i+1)\n    return sum\n\nassert sum_Of_product(3) == 15\n"}
{"task_id": "Mbpp/593", "completion": "\ndef removezero_ip(ip):\n    return \".\".join(str(int(i)) for i in ip.split(\".\"))\n\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n"}
{"task_id": "Mbpp/594", "completion": "\ndef diff_even_odd(arr):\n    even = None\n    odd = None\n    for num in arr:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            return abs(even - odd)\n    return None\n"}
{"task_id": "Mbpp/595", "completion": "\ndef min_Swaps(bin1, bin2):\n    count = 0\n    i = len(bin1) - 1\n    while i >= 0:\n        if bin1[i] != bin2[i]:\n            count += 1\n            if bin1[i-1] == bin2[i] and bin1[i] == bin2[i-1]:\n                bin1 = bin1[:i-1] + bin1[i] + bin1[i-1] + bin1[i+1:]\n                bin2 = bin2[:i-1] + bin2[i] + bin2[i-1] + bin2[i+1:]\n            elif bin1[i-1] == bin2[i] and bin1[i] != bin2[i-1]:\n                bin1 = bin1[:i-1] + bin1[i] + bin1[i-1] + bin1[i+1:]\n                bin2 = bin2[:i-1] + bin2[i] + bin2[i-1] + bin2[i+1:]\n            elif bin1[i-1] != bin2[i] and bin1[i] == bin2[i-1]:\n                bin1 = bin1[:i-1] + bin1[i] + bin1[i-1] + bin1[i+1:]\n                bin2 = bin2[:i-1] + bin2[i] + bin2[i-1] + bin2[i+1:]\n            else:\n                bin1 = bin1[:i] + bin1[i+1] + bin1[i] + bin1[i+2:]\n                bin2 = bin2[:i] + bin2[i+1] + bin2[i] + bin2[i+2:]\n        i -= 1\n    return count\n\nassert min_Swaps(\"1101\",\"1110\") == 1\n"}
{"task_id": "Mbpp/596", "completion": "\nimport sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n"}
{"task_id": "Mbpp/597", "completion": "\ndef find_kth(arr1, arr2, k):\n    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    if k < 0 or k > len(arr1) + len(arr2):\n        return None\n\n    len1 = len(arr1)\n    len2 = len(arr2)\n\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n\n    if len1 == 0:\n        return arr2[k - 1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    partition1 = min(k // 2, len1) - 1\n    partition2 = k - (partition1 + 1)\n\n    if arr1[partition1] <= arr2[partition2]:\n        return find_kth(arr1[partition1 + 1:], arr2, k - partition1 - 1)\n    else:\n        return find_kth(arr1, arr2[partition2 + 1:], k - partition2 - 1)\n"}
{"task_id": "Mbpp/598", "completion": "\ndef armstrong_number(n):\n    # Converting n to a string to find the length (number of digits)\n    num_str = str(n)\n    num_len = len(num_str)\n\n    # Initialize sum to 0\n    sum = 0\n\n    # Find the sum of the cube of each digit\n    for i in num_str:\n        sum += int(i) ** num_len\n\n    # If the calculated sum is equal to n, then n is an Armstrong number\n    return sum == n\n\n# Test the function\nassert armstrong_number(153)==True\n"}
{"task_id": "Mbpp/599", "completion": "\ndef sum_average(n):\n    sum_num = n * (n + 1) // 2\n    avg_num = sum_num / n\n    return (sum_num, avg_num)\n"}
{"task_id": "Mbpp/600", "completion": "\ndef is_Even(n):\n    return n % 2 == 0\n"}
{"task_id": "Mbpp/602", "completion": "\ndef first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n"}
{"task_id": "Mbpp/603", "completion": "\ndef get_ludic(n):\n    ludic_numbers = []\n    for i in range(1, n+1):\n        ludic = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                ludic = False\n                break\n        if ludic:\n            ludic_numbers.append(i)\n    return ludic_numbers\n\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n"}
{"task_id": "Mbpp/604", "completion": "\ndef reverse_words(s):\n    return ' '.join(s.split()[::-1])\n\nassert reverse_words(\"python program\")==(\"program python\")\n"}
{"task_id": "Mbpp/605", "completion": "\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"task_id": "Mbpp/606", "completion": "\nimport math\n\ndef radian_degree(degree):\n    return math.radians(degree)\n"}
{"task_id": "Mbpp/607", "completion": "\nimport re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n"}
{"task_id": "Mbpp/608", "completion": "\ndef bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n\nassert bell_Number(2) == 2\n"}
{"task_id": "Mbpp/610", "completion": "\ndef remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]\n\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n"}
{"task_id": "Mbpp/611", "completion": "\ndef max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)\n\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n"}
{"task_id": "Mbpp/612", "completion": "\ndef merge(lst):\n    return [[x[0] for x in lst], [x[1] for x in lst]]\n"}
{"task_id": "Mbpp/614", "completion": "\ndef cummulative_sum(tuple_list):\n    cum_sum = 0\n    for tup in tuple_list:\n        cum_sum += sum(tup)\n    return cum_sum\n\nprint(cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])) # Output: 30\n"}
{"task_id": "Mbpp/615", "completion": "\ndef average_tuple(tuples):\n    return [sum(tup) / len(tup) for tup in tuples]\n"}
{"task_id": "Mbpp/616", "completion": "\ndef tuple_modulo(t1, t2):\n    return tuple(x % y for x, y in zip(t1, t2))\n\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n"}
{"task_id": "Mbpp/618", "completion": "\ndef div_list(l1, l2):\n    return [a/b for a, b in zip(l1, l2)]\n"}
{"task_id": "Mbpp/619", "completion": "\ndef move_num(s):\n    return ''.join(sorted(s, key=lambda x: not x.isdigit()))\n\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n"}
{"task_id": "Mbpp/620", "completion": "\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef largest_subset(lst):\n    n = len(lst)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] % lst[j] == 0 or lst[j] % lst[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4\n"}
{"task_id": "Mbpp/622", "completion": "\ndef get_median(list1, list2, size):\n    total_list = sorted(list1 + list2)\n    if size % 2 == 0:\n        return (total_list[size//2] + total_list[size//2 - 1]) / 2\n    else:\n        return total_list[size//2]\n\n# Test the function\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n"}
{"task_id": "Mbpp/623", "completion": "\ndef nth_nums(nums, n):\n    return [num ** n for num in nums]\n"}
{"task_id": "Mbpp/624", "completion": "\ndef is_upper(string):\n    return string.upper()\n\n# Test the function\nassert is_upper(\"person\") ==\"PERSON\"\n"}
{"task_id": "Mbpp/626", "completion": "\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return 0.5 * radius ** 2\n"}
{"task_id": "Mbpp/628", "completion": "\ndef replace_spaces(s):\n    return s.replace(\" \", \"%20\")\n"}
{"task_id": "Mbpp/629", "completion": "\ndef Split(numbers):\n    return [num for num in numbers if num % 2 == 0]\n"}
{"task_id": "Mbpp/630", "completion": "\ndef get_coordinates(coord):\n    x, y = coord\n    res = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i >= 0 and j >= 0:\n                res.append([i, j])\n    return res\n\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n"}
{"task_id": "Mbpp/631", "completion": "\ndef replace_spaces(s):\n    return s.replace(' ', '_').replace('_', ' ')\n"}
{"task_id": "Mbpp/632", "completion": "\ndef move_zero(arr):\n    # Count the number of zeros\n    count = arr.count(0)\n    \n    # Remove all zeros from the list\n    arr = [i for i in arr if i != 0]\n    \n    # Extend the list by the number of zeros\n    arr.extend([0]*count)\n    \n    return arr\n"}
{"task_id": "Mbpp/633", "completion": "\ndef pair_xor_Sum(arr, k):\n    n = len(arr)\n    xor_sum = 0\n    for i in range(0,32):\n        cnt = 0\n        for j in range(0,n):\n            if((arr[j] & (1 << i))):\n               cnt += 1\n        xor_sum += cnt * (n-cnt) * 2\n    return xor_sum * k\n\n# Test the function\nassert pair_xor_Sum([5,9,7,6],4) == 47\n"}
{"task_id": "Mbpp/635", "completion": "\ndef heap_sort(lst):\n    def heapify(lst, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and lst[i] < lst[left]:\n            largest = left\n\n        if right < n and lst[largest] < lst[right]:\n            largest = right\n\n        if largest != i:\n            lst[i], lst[largest] = lst[largest], lst[i]\n            heapify(lst, n, largest)\n\n    n = len(lst)\n\n    for i in range(n, -1, -1):\n        heapify(lst, n, i)\n\n    for i in range(n-1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n\n    return lst\n\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"}
{"task_id": "Mbpp/637", "completion": "\ndef noprofit_noloss(given_amount, original_amount):\n    if given_amount == original_amount:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/638", "completion": "\ndef wind_chill(velocity, temp):\n    wct_index = 13.12 + 0.6215*temp - 11.37*velocity**0.16 + 0.3965*temp*velocity**0.16\n    return round(wct_index)\n"}
{"task_id": "Mbpp/639", "completion": "\ndef sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())\n"}
{"task_id": "Mbpp/640", "completion": "\nimport re\n\ndef remove_parenthesis(lst):\n    return [re.sub(r'\\s?\\([^)]*\\)\\s?', ' ', x) for x in lst]\n\nprint(remove_parenthesis([\"python (chrome)\"]))\n"}
{"task_id": "Mbpp/641", "completion": "\ndef is_nonagonal(n):\n    return n*(7*n-5)//2\n\nprint(is_nonagonal(10))  # Output: 325\n"}
{"task_id": "Mbpp/643", "completion": "\ndef text_match_wordz_middle(input_string):\n    # Check if 'z' is in the string, excluding the first and last character\n    return 'z' in input_string[1:-1]\n\n# Test the function\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n"}
{"task_id": "Mbpp/644", "completion": "\ndef reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]\n\n# test the function\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n"}
{"task_id": "Mbpp/720", "completion": "\ndef add_dict_to_tuple(tpl, dictionary):\n    return tpl + (dictionary,)\n\n# test the function\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n"}
{"task_id": "Mbpp/721", "completion": "\ndef maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0.0]*n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[n-1][n-1] / (n + n - 1)\n\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n"}
{"task_id": "Mbpp/722", "completion": "\ndef filter_data(students, min_height, min_weight):\n    return {name: info for name, info in students.items() if info[0] >= min_height and info[1] >= min_weight}\n\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n"}
{"task_id": "Mbpp/723", "completion": "\ndef count_same_pair(list1, list2):\n    assert len(list1) == len(list2)\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n"}
{"task_id": "Mbpp/724", "completion": "\ndef power_base_sum(base, power):\n    result = base ** power\n    sum_of_digits = sum(int(digit) for digit in str(result))\n    return sum_of_digits\n\nassert power_base_sum(2,100)==115\n"}
{"task_id": "Mbpp/725", "completion": "\nimport re\n\ndef extract_quotation(s):\n    return re.findall(r'\"(.*?)\"', s)\n\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n"}
{"task_id": "Mbpp/726", "completion": "\ndef multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))\n\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n"}
{"task_id": "Mbpp/728", "completion": "\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n"}
{"task_id": "Mbpp/730", "completion": "\ndef consecutive_duplicates(lst):\n    return [x for i, x in enumerate(lst) if i == 0 or x != lst[i-1]]\n\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n"}
{"task_id": "Mbpp/731", "completion": "\nimport math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * h\n"}
{"task_id": "Mbpp/732", "completion": "\ndef replace_specialchar(s):\n    special_chars = [' ', ',', '.']\n    for char in special_chars:\n        s = s.replace(char, ':')\n    return s\n\n# test the function\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n"}
{"task_id": "Mbpp/733", "completion": "\ndef find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # continue the search on left side\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n"}
{"task_id": "Mbpp/734", "completion": "\ndef sum_Of_Subarray_Prod(arr):\n    result = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            result += product\n    return result\n\n# Test the function\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n"}
{"task_id": "Mbpp/735", "completion": "\ndef toggle_middle_bits(n):\n    # Get the first and last bit\n    first_bit = n & 1\n    last_bit = (n >> 1) & 1\n    \n    # Get the middle bits and toggle them\n    middle_bits = (n >> 1) >> 1\n    toggled_middle_bits = ~middle_bits & 0x7\n    \n    # Combine the bits\n    result = (first_bit << 1) | (toggled_middle_bits << 1) | last_bit\n    \n    return result\n\n# Test the function\nassert toggle_middle_bits(9) == 15\n"}
{"task_id": "Mbpp/736", "completion": "\ndef left_insertion(arr, val):\n    low = 0\n    high = len(arr)\n\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid\n\n    return low\n"}
{"task_id": "Mbpp/737", "completion": "\nimport re\n\ndef check_str(s):\n    pattern = r\"^[aeiouAEIOU]\"\n    if re.search(pattern, s):\n        return True\n    else:\n        return False\n\n# Test the function\nassert check_str(\"annie\")\n"}
{"task_id": "Mbpp/739", "completion": "\nimport math\n\ndef find_Index(n):\n    t = 0\n    i = 1\n    while True:\n        t += i\n        i += 1\n        if len(str(t)) == n:\n            return i-1\n\n# Test the function\nprint(find_Index(2))  # Output: 4\n"}
{"task_id": "Mbpp/740", "completion": "\ndef tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t)-1, 2)}\n\nprint(tuple_to_dict((1, 5, 7, 10, 13, 5)))\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n"}
{"task_id": "Mbpp/741", "completion": "\ndef all_Characters_Same(str):\n    return len(set(str)) == 1\n\nassert all_Characters_Same(\"python\") == False\n"}
{"task_id": "Mbpp/742", "completion": "\nimport math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3) * math.pow(a,2)\n\nassert area_tetrahedron(3)==15.588457268119894\n"}
{"task_id": "Mbpp/743", "completion": "\ndef rotate_right(lst, k):\n    \"\"\"\n    Rotates the given list to the right by k places.\n\n    Parameters:\n    lst (list): The list to rotate.\n    k (int): The number of places to rotate the list to the right.\n\n    Returns:\n    list: The rotated list.\n    \"\"\"\n    # Calculate the length of the list\n    n = len(lst)\n\n    # Handle the case where k is greater than the length of the list\n    k = k % n\n\n    # Slice the list at the specified index and join the two parts in reversed order\n    return lst[-k:] + lst[:-k]\n"}
{"task_id": "Mbpp/744", "completion": "\ndef check_none(t):\n    return None in t\n"}
{"task_id": "Mbpp/745", "completion": "\ndef divisible_by_digits(startnum, endnum):\n    return [num for num in range(startnum, endnum+1) if all(int(digit) % num == 0 for digit in str(num))]\n\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n"}
{"task_id": "Mbpp/746", "completion": "\nimport math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return 0.5 * (radius ** 2) * math.radians(angle)\n"}
{"task_id": "Mbpp/748", "completion": "\ndef capital_words_spaces(s):\n    return ' '.join(word for word in s.split())\n\nassert capital_words_spaces(\"Python\") == 'Python'\n"}
{"task_id": "Mbpp/749", "completion": "\ndef sort_numeric_strings(lst):\n    return sorted(lst, key=lambda x: int(x))\n\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n"}
{"task_id": "Mbpp/750", "completion": "\ndef add_tuple(lst, tup):\n    return lst + list(tup)\n"}
{"task_id": "Mbpp/751", "completion": "\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(int(n / 2) - 1, -1, -1):\n        if not heapify(arr, i, n, True):\n            return False\n    return True\n\ndef heapify(arr, i, n, is_min_heap):\n    smallest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and (is_min_heap and arr[i] > arr[left]) or (not is_min_heap and arr[i] < arr[left]):\n        smallest = left\n\n    if right < n and (is_min_heap and arr[smallest] > arr[right]) or (not is_min_heap and arr[smallest] < arr[right]):\n        smallest = right\n\n    if smallest != i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        return heapify(arr, smallest, n, is_min_heap)\n    return True\n\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n"}
{"task_id": "Mbpp/752", "completion": "\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, 2 * b + a\n        return b\n\n# Test the function\nassert jacobsthal_num(5) == 11\n"}
{"task_id": "Mbpp/753", "completion": "\ndef min_k(records, k):\n    # Sorting the list of tuples based on the second element of each tuple\n    records.sort(key=lambda x: x[1])\n    \n    # Returning the first 'k' records from the sorted list\n    return records[:k]\n"}
{"task_id": "Mbpp/754", "completion": "\ndef extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n"}
{"task_id": "Mbpp/755", "completion": "\ndef second_smallest(numbers):\n    first, second = float('inf'), float('inf')\n    for n in numbers:\n        if n <= first:\n            first, second = n, first\n        elif n < second:\n            second = n\n    return second\n"}
{"task_id": "Mbpp/757", "completion": "\ndef count_reverse_pairs(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j][::-1]:\n                count += 1\n            if arr[j] == arr[i][::-1]:\n                count += 1\n    return count//2\n\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n"}
{"task_id": "Mbpp/758", "completion": "\ndef unique_sublists(l):\n    result = {}\n    for sublist in l:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in result:\n            result[tuple_sublist] += 1\n        else:\n            result[tuple_sublist] = 1\n    return result\n\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n"}
{"task_id": "Mbpp/759", "completion": "\ndef is_decimal(s):\n    try:\n        float(s)\n        if '.' in s:\n            integer, decimal = s.split('.')\n            if len(decimal) == 2:\n                if integer.isdigit() and decimal.isdigit():\n                    return True\n        return False\n    except ValueError:\n        return False\n\nassert is_decimal('123.11')==True\n"}
{"task_id": "Mbpp/760", "completion": "\ndef unique_Element(lst):\n    if len(set(lst)) == 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/762", "completion": "\ndef check_monthnumber_number(month_number):\n    if month_number in [4, 6, 9, 11]:\n        return True\n    elif month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number\"\n\n# Test the function\nassert check_monthnumber_number(6)==True\n"}
{"task_id": "Mbpp/763", "completion": "\ndef find_min_diff(arr, n):\n    arr.sort()\n\n    # Store the minimum difference value\n    min_diff = float('inf')\n    \n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        min_diff = min(min_diff, diff)\n        \n    return min_diff\n\n# Test the function\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n"}
{"task_id": "Mbpp/764", "completion": "\ndef number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Test the function\nassert number_ctr('program2bedone') == 1\n"}
{"task_id": "Mbpp/765", "completion": "\ndef is_polite(n):\n    polite_count = 0\n    num = 0\n    while polite_count < n:\n        num += 1\n        if is_prime(num):\n            polite_count += 1\n    return num\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\nassert is_polite(7) == 11\n"}
{"task_id": "Mbpp/766", "completion": "\ndef pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n"}
{"task_id": "Mbpp/767", "completion": "\ndef get_pairs_count(lst, _sum):\n    count = 0\n    num_dict = {}\n    \n    for num in lst:\n        diff = _sum - num\n        if diff in num_dict:\n            count += num_dict[diff]\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    \n    return count\n\n# Test\nassert get_pairs_count([1,1,1,1],2) == 6\n"}
{"task_id": "Mbpp/769", "completion": "\ndef Diff(list1, list2):\n    return [i for i in list1 if i not in list2]\n\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n"}
{"task_id": "Mbpp/770", "completion": "\ndef odd_num_sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n\nassert odd_num_sum(2) == 82\n"}
{"task_id": "Mbpp/771", "completion": "\ndef check_expression(expr):\n    stack = []\n    mapping = {'}': '{', ']': '[', ')': '('}\n\n    for char in expr:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n\n    return not stack\n\n# Test the function\nassert check_expression(\"{()}[{}]\") == True\n"}
{"task_id": "Mbpp/772", "completion": "\ndef remove_length(s, k):\n    return ' '.join(word for word in s.split() if len(word) != k)\n\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n"}
{"task_id": "Mbpp/773", "completion": "\ndef occurance_substring(main_string, sub_string):\n    position = main_string.find(sub_string)\n    if position == -1:\n        return None\n    else:\n        return sub_string, position, position + len(sub_string)\n\n# Test\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n"}
{"task_id": "Mbpp/775", "completion": "\ndef odd_position(lst):\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            return False\n    return True\n\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n"}
{"task_id": "Mbpp/777", "completion": "\ndef find_sum(lst):\n    return sum(set(lst))\n\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n"}
{"task_id": "Mbpp/778", "completion": "\ndef pack_consecutive_duplicates(lst):\n    result = []\n    for i in lst:\n        if result and i == result[-1][0]:\n            result[-1].append(i)\n        else:\n            result.append([i])\n    return result\n\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n"}
{"task_id": "Mbpp/780", "completion": "\nfrom itertools import combinations\n\ndef find_combinations(tuples_list):\n    result = []\n    for r in range(1, len(tuples_list)+1):\n        for combination in combinations(tuples_list, r):\n            result.append(tuple(map(sum, zip(*combination))))\n    return result\n\nprint(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]))\n"}
{"task_id": "Mbpp/781", "completion": "\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\nassert count_divisors(10)\n"}
{"task_id": "Mbpp/782", "completion": "\ndef odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        sum += ((i+1)*(n-i)*arr[i])\n    return sum\n\nprint(odd_length_sum([1,2,4])) # 14\n"}
{"task_id": "Mbpp/783", "completion": "\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx * 100\n    return round(h, 2), round(s, 2), round(v, 2)\n"}
{"task_id": "Mbpp/784", "completion": "\ndef mul_even_odd(lst):\n    even_product = 1\n    odd_product = 1\n    for i in lst:\n        if i % 2 == 0:\n            even_product *= i\n        else:\n            odd_product *= i\n    return even_product * odd_product\n"}
{"task_id": "Mbpp/785", "completion": "\ndef tuple_str_int(tuple_str):\n    # Remove the parentheses and split the elements by comma\n    elements = tuple_str[1:-1].split(',')\n    # Convert each element to integer and return as a tuple\n    return tuple(int(element.strip()) for element in elements)\n\n# Test the function\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n"}
{"task_id": "Mbpp/786", "completion": "\ndef right_insertion(arr, val):\n    low = 0\n    high = len(arr)\n\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid\n\n    return low\n"}
{"task_id": "Mbpp/787", "completion": "\ndef text_match_three(input_str):\n    return \"abbb\" in input_str\n"}
{"task_id": "Mbpp/788", "completion": "\ndef new_tuple(my_list, my_str):\n    return tuple(my_list + [my_str])\n\n# Test\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n"}
{"task_id": "Mbpp/790", "completion": "\ndef even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\n# Test the function\nassert even_position([3,2,1]) == False\n"}
{"task_id": "Mbpp/791", "completion": "\ndef remove_nested(t):\n    return tuple(i for i in t if not isinstance(i, tuple))\n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n"}
{"task_id": "Mbpp/792", "completion": "\ndef count_list(lst):\n    return len(lst)\n"}
{"task_id": "Mbpp/793", "completion": "\ndef last(arr, x):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\nassert last([1,2,3],1) == 0\n"}
{"task_id": "Mbpp/794", "completion": "\nimport re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/796", "completion": "\ndef return_sum(dict):\n    return sum(dict.values())\n"}
{"task_id": "Mbpp/797", "completion": "\ndef sum_in_range(l, r):\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 != 0:\n            sum += i\n    return sum\n\nassert sum_in_range(2,5) == 8\n"}
{"task_id": "Mbpp/798", "completion": "\ndef _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nassert _sum([1, 2, 3]) == 6\n"}
{"task_id": "Mbpp/799", "completion": "\ndef left_rotate(num, d):\n    bit_size = 32\n    return (num << d) | (num >> (bit_size - d))\n\nassert left_rotate(16, 2) == 64\n"}
{"task_id": "Mbpp/800", "completion": "\ndef remove_all_spaces(input_string):\n    return input_string.replace(\" \", \"\")\n"}
{"task_id": "Mbpp/801", "completion": "\ndef test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    else:\n        return 0\n"}
{"task_id": "Mbpp/803", "completion": "\nimport math\n\ndef is_perfect_square(n):\n    root = math.sqrt(n)\n    return int(root + 0.5) ** 2 == n\n\nassert not is_perfect_square(10)\n"}
{"task_id": "Mbpp/804", "completion": "\ndef is_product_even(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product % 2 == 0\n"}
{"task_id": "Mbpp/805", "completion": "\ndef max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)\n"}
{"task_id": "Mbpp/806", "completion": "\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for c in s:\n        if c.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n"}
{"task_id": "Mbpp/807", "completion": "\ndef first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None\n"}
{"task_id": "Mbpp/808", "completion": "\ndef check_K(tuples, k):\n    return k in tuples\n"}
{"task_id": "Mbpp/809", "completion": "\ndef check_smaller(t1, t2):\n    for a, b in zip(t1, t2):\n        if a >= b:\n            return False\n    return True\n\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n"}
