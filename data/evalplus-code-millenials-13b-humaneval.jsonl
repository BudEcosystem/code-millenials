{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    count = 0\n    start = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            if count == 0:\n                start = i\n            count += 1\n        elif paren_string[i] == ')':\n            count -= 1\n            if count == 0:\n                result.append(paren_string[start:i+1])\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    differences = [abs(x - mean) for x in numbers]\n    mad = sum(differences) / len(numbers)\n    return mad\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    result = []\n    groups = paren_string.split(' ')\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n    total_sum = 0\n    total_product = 1\n\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n\n    return total_sum, total_product\n"}
{"task_id": "HumanEval/9", "completion": "\n    rolling_max_numbers = []\n    current_max = numbers[0]\n    rolling_max_numbers.append(current_max)\n\n    for number in numbers[1:]:\n        if number > current_max:\n            current_max = number\n        rolling_max_numbers.append(current_max)\n\n    return rolling_max_numbers\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            reversed_prefix = string[:i][::-1]\n            return string + reversed_prefix\n\n    return string + string[::-1]\n"}
{"task_id": "HumanEval/11", "completion": "\n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string)+1)]\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    # Convert the string to lowercase to ignore the case of the characters\n    string = string.lower()\n    \n    # Use a set to store the distinct characters\n    distinct_chars = set()\n    \n    # Iterate through the characters in the string\n    for char in string:\n        # Add the character to the set\n        distinct_chars.add(char)\n    \n    # Return the number of distinct characters\n    return len(distinct_chars)\n"}
{"task_id": "HumanEval/17", "completion": "\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    numbers_list = numbers.split()\n    numbers_list = [number_map[num] for num in numbers_list]\n    numbers_list.sort()\n    sorted_numbers = [key for key, value in number_map.items() if value in numbers_list]\n    return ' '.join(sorted_numbers)\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = None\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n\n    return result\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        return None\n\n    for x in range(-100, 101):\n        if poly(xs, x) == 0:\n            return x\n\n    return None\n"}
{"task_id": "HumanEval/33", "completion": "\n    third_elements = sorted([l[i] for i in range(0, len(l), 3)])\n    for i, value in enumerate(l):\n        if i % 3 == 0:\n            l[i] = third_elements.pop(0)\n    return l\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(11, n, 11):\n        count += str(i).count('7')\n    for i in range(13, n, 13):\n        count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_list = [l[i] for i in range(0, len(l), 2)]\n    even_list.sort()\n    \n    new_l = l.copy()\n    for i in range(0, len(l), 2):\n        new_l[i] = even_list.pop(0)\n        \n    return new_l\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num: int):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num: int):\n        x = 0\n        y = 1\n        while y < num:\n            z = x + y\n            x = y\n            y = z\n        return y == num\n\n    count = 0\n    fib_num = 1\n    while True:\n        if is_prime(fib_num) and is_fibonacci(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        fib_num += 1\n"}
{"task_id": "HumanEval/40", "completion": "\n    n = len(l)\n    if n < 3:\n        return False\n\n    l.sort()\n\n    for i in range(n - 1):\n        left = i + 1\n        right = n - 1\n\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * n  # The number of collisions is the product of the number of cars in each direction.\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    set_l = set(l)\n    for num in set_l:\n        if -num in set_l:\n            return True\n    return False\n\nprint(pairs_sum_to_zero([1, 3, 5, 0])) # False\nprint(pairs_sum_to_zero([1, 3, -2, 1])) # False\nprint(pairs_sum_to_zero([1, 2, 3, 7])) # False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7])) # True\nprint(pairs_sum_to_zero([1])) # False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x < 0:\n        return \"-\" + change_base(-x, base)\n    elif x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        cache = [0] * (n + 1)\n        cache[2] = 2\n\n        for i in range(4, n + 1):\n            cache[i] = cache[i - 1] + cache[i - 2] + cache[i - 3] + cache[i - 4]\n            \n        return cache[n]\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    if n == 0:\n        return 1\n    elif n < 0:\n        return modp(-n, p)\n    else:\n        res = 1\n        while n > 0:\n            if n % 2 == 1:\n                res = (res * 2) % p\n            n = n // 2\n        return res\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\n    for num in l:\n        if num >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/57", "completion": "\n    increasing = None\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            if increasing is None:\n                increasing = True\n            elif not increasing:\n                return False\n        elif l[i] > l[i + 1]:\n            if increasing is None:\n                increasing = False\n            elif increasing:\n                return False\n    return True\n"}
{"task_id": "HumanEval/58", "completion": "\n    common_set = set(l1) & set(l2)\n    return sorted(list(common_set))\n\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8], [3, 2]))\n"}
{"task_id": "HumanEval/59", "completion": "\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1  # equivalent to n /= 2\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)\n"}
{"task_id": "HumanEval/60", "completion": "\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n    # Create an empty list to store the new coefficients\n    derivative_coefficients = []\n\n    # Iterate through the coefficients starting from index 1\n    for i in range(1, len(xs)):\n        # Append the derivative coefficient (i * xs[i]) to the new coefficients list\n        derivative_coefficients.append(i * xs[i])\n\n    return derivative_coefficients\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        cache = [0] * (n + 1)\n        cache[2] = 1\n\n        for i in range(3, n + 1):\n            cache[i] = cache[i - 1] + cache[i - 2] + cache[i - 3]\n        \n        return cache[n]\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = \"aeiou\"\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    num_str = str(x)\n    num_digits = len(num_str)\n    \n    if shift >= num_digits:\n        return num_str[::-1]\n    \n    shift %= num_digits\n    \n    return num_str[-shift:] + num_str[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(c) for c in s if c.isupper())\n\nprint(digitSum(\"\")) # 0\nprint(digitSum(\"abAB\")) # 131\nprint(digitSum(\"abcCd\")) # 67\nprint(digitSum(\"helloE\")) # 69\nprint(digitSum(\"woArBld\")) # 131\nprint(digitSum(\"aAaaaXa\")) # 153\n"}
{"task_id": "HumanEval/67", "completion": "\n    s = s.split()\n    oranges = int(s[2])\n    apples = int(s[0])\n    mango_fruits = n - oranges - apples\n    return mango_fruits\n"}
{"task_id": "HumanEval/68", "completion": "\n    smallest_even = None\n    smallest_even_index = None\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_even_index = index\n\n    if smallest_even is None:\n        return []\n    else:\n        return [smallest_even, smallest_even_index]\n"}
{"task_id": "HumanEval/69", "completion": "\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n\n    for num in sorted(frequency.keys(), reverse=True):\n        if frequency[num] >= num:\n            return num\n\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    result = []\n    while lst:\n        min_val = min(lst)\n        lst.remove(min_val)\n        result.append(min_val)\n        if lst:\n            max_val = max(lst)\n            lst.remove(max_val)\n            result.append(max_val)\n    return result\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    # check if the list is palindromic\n    if q == q[::-1]:\n        # check if the sum of its elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n    return False\n"}
{"task_id": "HumanEval/73", "completion": "\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n\n    return changes\n\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))  # Output: 0\n"}
{"task_id": "HumanEval/74", "completion": "\n    def count_chars(lst):\n        return sum(len(s) for s in lst)\n\n    if count_chars(lst1) <= count_chars(lst2):\n        return lst1\n    else:\n        return lst2\n\nprint(total_match([], [])) # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi'])) # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])) # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])) # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5'])) # \u279e ['4']\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    if a > 1 and is_prime(a):\n        factors.append(a)\n\n    return len(factors) == 3\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n == 1:\n        return False\n    while x % n == 0:\n        x = x / n\n    return x == 1\n\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False\n"}
{"task_id": "HumanEval/77", "completion": "\n    c = int(round(a ** (1. / 3)))\n    return c * c * c == abs(a)\n\nprint(iscube(1))  # True\nprint(iscube(2))  # False\nprint(iscube(-1))  # True\nprint(iscube(64))  # True\nprint(iscube(0))  # True\nprint(iscube(180))  # False\n"}
{"task_id": "HumanEval/78", "completion": "\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"db\"\n\nprint(decimal_to_binary(15))  # returns \"db1111db\"\nprint(decimal_to_binary(32))  # returns \"db100000db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i % 10 == 1 or i // 10**(n-1) == 1:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "\n    # Finding the sum of digits\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    \n    # Converting the sum to binary\n    binary_sum = bin(sum_of_digits)[2:]\n    \n    return binary_sum\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)\n\nprint(anti_shuffle('Hi'))  # returns 'Hi'\nprint(anti_shuffle('hello'))  # returns 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # returns 'Hello !!!Wdlor'\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                result.append((i, j))\n    result.sort(key=lambda a: (a[0], -a[1]))\n    return result\n"}
{"task_id": "HumanEval/88", "completion": "\n    if sum(array[0:2]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\nprint(sort_array([]))  # => []\nprint(sort_array([5]))  # => [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # => [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))  # => [6, 5, 4, 3, 2, 1, 0]\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.islower() else 4\n            new_char = chr((ord(char) - 97 + shift) % 26 + 97) if char.islower() else chr((ord(char) - 65 + shift) % 26 + 65)\n            encrypted_string += new_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n\nprint(encrypt('hi'))  # returns 'lm'\nprint(encrypt('asdfghjkl'))  # returns 'ewhjklnop'\nprint(encrypt('gf'))  # returns 'kj'\nprint(encrypt('et'))  # returns 'ix'\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num > smallest:\n            second_smallest = num\n    \n    return None if second_smallest == float('inf') else second_smallest\n"}
{"task_id": "HumanEval/91", "completion": "\n    # Split the text into sentences\n    sentences = []\n    temp_sentence = ''\n    for char in S:\n        if char not in '.?!':\n            temp_sentence += char\n        else:\n            sentences.append(temp_sentence.strip())\n            temp_sentence = ''\n    sentences.append(temp_sentence.strip())  # Append the last sentence\n\n    # Count the number of boredoms starting with \"I\"\n    boredoms = 0\n    for sentence in sentences:\n        if len(sentence) > 0 and sentence[0] == 'I':\n            boredoms += 1\n\n    return boredoms\n"}
{"task_id": "HumanEval/92", "completion": "\n    # check if all inputs are integers\n    if all(isinstance(i, int) for i in [x, y, z]):\n        # check if any input is equal to the sum of the other two\n        if x == y + z or x == z + y or y == x + z or y == z + x or z == x + y or z == y + x:\n            return True\n    return False\n\nprint(any_int(5, 2, 7))  # \u279e True\nprint(any_int(3, 2, 2))  # \u279e False\nprint(any_int(3, -2, 1))  # \u279e True\nprint(any_int(3.6, -2.2, 2))  # \u279e False\n"}
{"task_id": "HumanEval/93", "completion": "\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n        else:\n            encoded_message += char\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_message = \"\"\n    for char in encoded_message:\n        if char.isalpha() and char in vowels:\n            if char == 'a':\n                new_message += 'c'\n            elif char == 'e':\n                new_message += 'g'\n            elif char == 'i':\n                new_message += 'k'\n            elif char == 'o':\n                new_message += 'q'\n            elif char == 'u':\n                new_message += 'w'\n        else:\n            new_message += char\n    return new_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n\n    lower_case_keys = [key for key in dict.keys() if key.islower()]\n    upper_case_keys = [key for key in dict.keys() if key.isupper()]\n\n    if len(lower_case_keys) == len(dict) or len(upper_case_keys) == len(dict):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n:\n            break\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    unit_digit_a = abs(a % 10)\n    unit_digit_b = abs(b % 10)\n    return unit_digit_a * unit_digit_b\n"}
{"task_id": "HumanEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    num = float(value)\n    if num >= 0:\n        if num - int(num) < 0.5:\n            return int(num)\n        else:\n            return int(num) + 1\n    else:\n        if int(num) - num < 0.5:\n            return int(num)\n        else:\n            return int(num) - 1\n"}
{"task_id": "HumanEval/100", "completion": "\n    p = []\n    if n % 2 == 0:\n        for i in range(n):\n            p.append(n + 2 * i)\n    else:\n        for i in range(n):\n            p.append(n + 2 * i)\n    return p\n"}
{"task_id": "HumanEval/101", "completion": "\n    # Replace commas with spaces\n    s = s.replace(',', ' ')\n    \n    # Split the string into words\n    words = s.split()\n    \n    return words\n"}
{"task_id": "HumanEval/102", "completion": "\n    result = -1\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            result = i\n            break\n    return result\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)\n"}
{"task_id": "HumanEval/104", "completion": "\n    result = []\n    for num in x:\n        has_even_digit = False\n        temp_num = num\n        while temp_num > 0:\n            digit = temp_num % 10\n            if digit % 2 == 0:\n                has_even_digit = True\n                break\n            temp_num //= 10\n        if not has_even_digit:\n            result.append(num)\n    result.sort()\n    return result\n"}
{"task_id": "HumanEval/105", "completion": "\n    num2words = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    result = []\n    for num in sorted([i for i in arr if 1 <= i <= 9], reverse=True):\n        result.append(num2words[num])\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_ = 0\n            for j in range(1, i + 1):\n                sum_ += j\n            result.append(sum_)\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -((-num // 10) * 10 + (num % 10))\n        digits = [int(d) for d in str(num)]\n        if sum(digits) > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\n    if len(arr) == 0:\n        return True\n\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr.insert(0, arr.pop())  # right shift operation\n\n    return False\n"}
{"task_id": "HumanEval/110", "completion": "\n    even_count = 0\n    odd_count = 0\n    for num1 in lst1:\n        if num1 % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    for num2 in lst2:\n        if num2 % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if odd_count > even_count:\n        return \"NO\"\n    else:\n        return \"YES\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    # Create a dictionary to store the occurrences of each letter\n    occurrences = {}\n    for letter in test.split():\n        if letter in occurrences:\n            occurrences[letter] += 1\n        else:\n            occurrences[letter] = 1\n\n    # Find the maximum occurrence\n    max_occurrence = max(occurrences.values()) if occurrences else 0\n\n    # Find the letters with the maximum occurrence\n    max_letters = {letter: count for letter, count in occurrences.items() if count == max_occurrence}\n\n    return max_letters\n"}
{"task_id": "HumanEval/112", "completion": "\n    # Delete all occurrences of characters in c from s\n    for char in c:\n        s = s.replace(char, '')\n    \n    # Check if the result string is palindrome\n    is_palindrome = s == s[::-1]\n    \n    return (s, is_palindrome)\n\n# Test cases\nprint(reverse_delete(\"abcde\", \"ae\"))  # should return ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))  # should return ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # should return ('cdedc', True)\n"}
{"task_id": "HumanEval/113", "completion": "\n    res = []\n    for i, s in enumerate(lst):\n        num_odds = sum(1 for c in s if int(c) % 2 != 0)\n        st = \"the number of odd elements {0}n the str{0}ng {0} of the {0}nput.\".format(num_odds)\n        res.append(st)\n    return res\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    count = 0\n    for row in grid:\n        count += sum(row)\n    return math.ceil(count / capacity)\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        count = 0\n        for letter in word:\n            if letter.lower() in consonants:\n                count += 1\n        return count\n\n    words = s.split()\n    result = []\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"AEIOUaeiou\"\n    word = word[::-1]  # Reversing the word to start from the right\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\nprint(get_closest_vowel(\"yogurt\"))  # \"u\"\nprint(get_closest_vowel(\"FULL\"))  # \"U\"\nprint(get_closest_vowel(\"quick\"))  # \"\"\nprint(get_closest_vowel(\"ab\"))  # \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    lst1, lst2 = lst\n\n    open_count_1 = lst1.count('(')\n    close_count_1 = lst1.count(')')\n\n    open_count_2 = lst2.count('(')\n    close_count_2 = lst2.count(')')\n\n    if open_count_1 < close_count_1 and open_count_2 > close_count_2:\n        return 'Yes'\n    elif open_count_1 > close_count_1 and open_count_2 < close_count_2:\n        return 'Yes'\n    elif open_count_1 == close_count_1 and open_count_1 + open_count_2 == close_count_1 + close_count_2:\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    arr.sort(reverse=True)\n    return arr[:k]\n\nprint(maximum([-3, -4, 5], 3))  # [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))  # [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # [2]\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(val for idx, val in enumerate(lst) if idx % 2 == 0 and val % 2 == 1)\n"}
{"task_id": "HumanEval/122", "completion": "\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate over the first k elements of arr\n    for i in range(k):\n        # If the element has at most two digits, add it to the sum\n        if arr[i] >= 0 and arr[i] <= 99:\n            sum += arr[i]\n\n    return sum\n"}
{"task_id": "HumanEval/123", "completion": "\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)\n    return sorted(odd_numbers)\n"}
{"task_id": "HumanEval/124", "completion": "\n    if not date:\n        return False\n\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or day > 31:\n        return False\n\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n\n    if month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            if day > 29:\n                return False\n        else:\n            if day > 28:\n                return False\n\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for ch in txt if ch.islower() and (ord(ch) - ord('a')) % 2 == 1)\n\nprint(split_words(\"Hello world!\"))\nprint(split_words(\"Hello,world!\"))\nprint(split_words(\"abcdef\"))\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) == 0:\n        return True\n\n    if len(lst) == 1:\n        return True\n\n    if len(lst) == 2:\n        return lst[0] < lst[1]\n\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n\n    return True\n\nprint(is_sorted([5])) # True\nprint(is_sorted([1, 2, 3, 4, 5])) # True\nprint(is_sorted([1, 3, 2, 4, 5])) # False\nprint(is_sorted([1, 2, 3, 4, 5, 6])) # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7])) # True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7])) # False\nprint(is_sorted([1, 2, 2, 3, 3, 4])) # True\nprint(is_sorted([1, 2, 2, 2, 3, 4])) # False\n"}
{"task_id": "HumanEval/127", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n\n    signs_prod = 1\n    sum_magnitudes = 0\n\n    for num in arr:\n        if num < 0:\n            signs_prod *= -1\n        sum_magnitudes += abs(num)\n\n    return signs_prod * sum_magnitudes\n"}
{"task_id": "HumanEval/129", "completion": "\n    N = len(grid)\n    dist = [[float('inf')] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            dist[i][j] = grid[i][j]\n\n    for _ in range(k - 1):\n        for i in range(N):\n            for j in range(N):\n                if i > 0:\n                    dist[i][j] = min(dist[i][j], dist[i - 1][j] + grid[i][j])\n                if j > 0:\n                    dist[i][j] = min(dist[i][j], dist[i][j - 1] + grid[i][j])\n\n    ans = []\n    for i in range(N):\n        for j in range(N):\n            ans.append(dist[i][j])\n    ans.sort()\n    return ans[:k]\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n        return sequence\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '[':\n                stack.pop()\n                if len(stack) > 0 and stack[-1] == '[':\n                    return True\n            else:\n                return False\n    return False\n\nprint(is_nested('[[]]')) # \u279e True\nprint(is_nested('[]]]]]]][[[[[]')) # \u279e False\nprint(is_nested('[][]')) # \u279e False\nprint(is_nested('[]')) # \u279e False\nprint(is_nested('[[][]]')) # \u279e True\nprint(is_nested('[[]][[')) # \u279e True\n"}
{"task_id": "HumanEval/133", "completion": "\n    # Import the math module to use the ceil function\n    import math\n    \n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through each number in the list\n    for num in lst:\n        # Round the number up to the nearest integer using math.ceil\n        rounded_num = math.ceil(num)\n        \n        # Square the rounded number and add it to the total sum\n        total_sum += rounded_num ** 2\n    \n    return total_sum\n"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt:\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha() and last_char.strip() != ''\n\nprint(check_if_last_char_is_a_letter(\"apple pie\")) # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\")) # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \")) # \u279e False\nprint(check_if_last_char_is_a_letter(\"\")) # \u279e False \n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    return (max(neg) if neg else None, min(pos) if pos else None)\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\nprint(largest_smallest_integers([]))\nprint(largest_smallest_integers([0]))\nprint(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3]))\nprint(largest_smallest_integers([0, 0, 0, 0]))\n"}
{"task_id": "HumanEval/137", "completion": "\n    if type(a) == str:\n        a = float(a.replace(\",\", \".\"))\n    if type(b) == str:\n        b = float(b.replace(\",\", \".\"))\n\n    if a == b:\n        return None\n    elif a > b:\n        if type(a) == float:\n            return a\n        elif type(b) == float:\n            return b\n    else:\n        if type(a) == float:\n            return a\n        elif type(b) == float:\n            return b\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n < 10:\n        return False\n    elif n % 2 != 0:\n        return False\n    else:\n        for i in range(2, n//2+1, 2):\n            for j in range(i+2, n//2+1, 2):\n                for k in range(j+2, n//2+1, 2):\n                    for l in range(k+2, n//2+1, 2):\n                        if i + j + k + l == n:\n                            return True\n        return False\n"}
{"task_id": "HumanEval/139", "completion": "\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result\n\n\ndef factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(special_factorial(4))  # Output: 288\n"}
{"task_id": "HumanEval/140", "completion": "\n    new_text = text.replace(\" \", \"_\")\n    return new_text.replace(\"__\", \"-\") if \"__\" in new_text else new_text\n\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"\n"}
{"task_id": "HumanEval/141", "completion": "\n    # split the file name into the part before and after the dot\n    name_parts = file_name.split('.')\n    \n    # check if there is exactly one dot in the file name\n    if len(name_parts) != 2:\n        return 'No'\n    \n    # check if the part before the dot starts with a latin alphapet letter\n    if not name_parts[0][0].isalpha():\n        return 'No'\n    \n    # check if there are more than three digits in the file name\n    if len([char for char in name_parts[0] if char.isdigit()]) > 3:\n        return 'No'\n    \n    # check if the substring after the dot is one of the allowed types\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n"}
{"task_id": "HumanEval/144", "completion": "\n    # Split the fraction into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the result of the multiplication\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n\n    # Check if the result is a whole number\n    if result_num % result_den == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda n: (sum_digits(n), nums.index(n)))\n"}
{"task_id": "HumanEval/146", "completion": "\n    def is_odd(n):\n        return n % 2 == 1\n\n    count = 0\n    for num in nums:\n        if num > 10 and is_odd(num // 10) and is_odd(num % 10):\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15])) # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [(i * i - i + 1) for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    \n    if planet1_index < planet2_index:\n        return tuple(planets[planet1_index+1:planet2_index])\n    else:\n        return tuple(planets[planet2_index+1:planet1_index])\n\nprint(bf(\"Jupiter\", \"Neptune\")) #==> (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\")) #==> (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\")) #==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n"}
{"task_id": "HumanEval/149", "completion": "\n    # Deleting the strings that have odd lengths\n    lst = [i for i in lst if len(i) % 2 == 0]\n    \n    # Sorting the list by length of each word and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return x if is_prime(n) else y\n"}
{"task_id": "HumanEval/151", "completion": "\n    result = 0\n    for num in lst:\n        if num > 0 and type(num) == int and num % 2 == 1:\n            result += num ** 2\n    return result\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(a-b) for a, b in zip(game, guess)]\n"}
{"task_id": "HumanEval/153", "completion": "\n    strongest = extensions[0]\n    strongest_strength = sum([(1 if c.isupper() else -1) for c in strongest])\n    \n    for extension in extensions[1:]:\n        strength = sum([(1 if c.isupper() else -1) for c in extension])\n        if strength > strongest_strength:\n            strongest = extension\n            strongest_strength = strength\n    \n    return f\"{class_name}.{strongest}\"\n"}
{"task_id": "HumanEval/154", "completion": "\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    for r in rotations:\n        if r in a:\n            return True\n    return False\n\nprint(cycpattern_check(\"abcd\",\"abd\")) # False\nprint(cycpattern_check(\"hello\",\"ell\")) # True\nprint(cycpattern_check(\"whassup\",\"psus\")) # False\nprint(cycpattern_check(\"abab\",\"baa\")) # True\nprint(cycpattern_check(\"efef\",\"eeff\")) # False\nprint(cycpattern_check(\"himenss\",\"simen\")) # True\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n"}
{"task_id": "HumanEval/157", "completion": "\n    # Check if the given sides form a triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n\n    # Check if the triangle is right-angled\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2 or sides[0]**2 + sides[2]**2 == sides[1]**2 or sides[1]**2 + sides[2]**2 == sides[0]**2\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_len:\n            max_len = unique_chars\n            max_word = word\n        elif unique_chars == max_len:\n            max_word = min(word, max_word)\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    has_letter = False\n    res = []\n    for i in s:\n        if i.isalpha():\n            has_letter = True\n            if i.islower():\n                res.append(i.upper())\n            else:\n                res.append(i.lower())\n        else:\n            res.append(i)\n    if not has_letter:\n        return ''.join(res[::-1])\n    return ''.join(res)\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    result = []\n    start = min(a, b)\n    end = max(a, b)\n\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            result.append(i)\n\n    return result\n"}
