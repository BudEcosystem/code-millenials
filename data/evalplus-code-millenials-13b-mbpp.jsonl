{"task_id": "Mbpp/2", "completion": "\ndef similar_elements(list1, list2):\n    return list(set(list1) & set(list2))\n\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n"}
{"task_id": "Mbpp/3", "completion": "\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n"}
{"task_id": "Mbpp/4", "completion": "\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    heap = nums[:n]\n    heapq.heapify(heap)\n    for num in nums[n:]:\n        if num > heap[0]:\n            heapq.heapreplace(heap, num)\n    return heap[::-1]\n\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]\n"}
{"task_id": "Mbpp/6", "completion": "\ndef differ_At_One_Bit_Pos(num1, num2):\n    xor_result = num1 ^ num2\n    return bin(xor_result).count('1') == 1\n"}
{"task_id": "Mbpp/7", "completion": "\ndef find_char_long(s):\n    words = s.split()\n    return [word for word in words if len(word) >= 4]\n\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n"}
{"task_id": "Mbpp/8", "completion": "\ndef square_nums(lst):\n    return [i**2 for i in lst]\n\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"}
{"task_id": "Mbpp/9", "completion": "\ndef find_Rotations(s):\n    if len(s) == 0:\n        return 0\n\n    for i in range(len(s)):\n        if s == s[i:] + s[:i]:\n            return i\n\n    return -1\n"}
{"task_id": "Mbpp/11", "completion": "\ndef remove_Occ(s, ch):\n    if ch in s:\n        s = s.replace(ch, '', 1)\n        s = s[::-1].replace(ch, '', 1)[::-1]\n    return s\n\nprint(remove_Occ(\"hello\",\"l\")) # Output: \"heo\"\n"}
{"task_id": "Mbpp/12", "completion": "\ndef sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"}
{"task_id": "Mbpp/14", "completion": "\ndef find_Volume(a, b, c):\n    # calculate the semi-perimeter\n    s = (a + b + c) / 2\n    # calculate the volume using the formula for the volume of a triangular prism\n    volume = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return volume\n\n# test the function\nassert find_Volume(10, 8, 6) == 240\n"}
{"task_id": "Mbpp/16", "completion": "\ndef text_lowercase_underscore(s):\n    return all(c.islower() or c == '_' for c in s)\n"}
{"task_id": "Mbpp/17", "completion": "\ndef square_perimeter(side_length):\n    return 4 * side_length\n"}
{"task_id": "Mbpp/18", "completion": "\ndef remove_dirty_chars(s1, s2):\n    for char in s2:\n        if char in s1:\n            s1 = s1.replace(char, '')\n    return s1\n\nprint(remove_dirty_chars(\"probasscurve\", \"pros\"))  # Output: 'bacuve'\n"}
{"task_id": "Mbpp/19", "completion": "\ndef test_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "Mbpp/20", "completion": "\ndef is_woodall(n):\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return sum == n\n"}
{"task_id": "Mbpp/56", "completion": "\ndef check(n):\n    twice_reverse = int(str(n)[::-1]) * 2\n    return n == twice_reverse - 1\n"}
{"task_id": "Mbpp/57", "completion": "\ndef find_Max_Num(lst):\n    # sort the list in reverse order\n    lst.sort(reverse=True)\n    # join the list elements to form a string\n    str_num = ''.join(map(str, lst))\n    # convert the string to an integer\n    num = int(str_num)\n    return num\n"}
{"task_id": "Mbpp/58", "completion": "\ndef opposite_Signs(a, b):\n    return (a > 0 and b < 0) or (a < 0 and b > 0)\n\n# Test the function\nassert opposite_Signs(1,-2) == True\n"}
{"task_id": "Mbpp/59", "completion": "\ndef is_octagonal(n):\n    return n * (2 * (n - 1) + 1)\n\nassert is_octagonal(5) == 65\n"}
{"task_id": "Mbpp/61", "completion": "\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        sum = 0\n        for j in range(i, len(s)):\n            sum += int(s[j])\n            if sum == j - i + 1:\n                count += 1\n    return count\n\nprint(count_Substrings('112112'))  # Output: 6\n"}
{"task_id": "Mbpp/62", "completion": "\ndef smallest_num(lst):\n    return min(lst)\n\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n"}
{"task_id": "Mbpp/63", "completion": "\ndef max_difference(tuples):\n    max_diff = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            diff = abs(tuples[i][0] - tuples[j][0])\n            if diff > max_diff:\n                max_diff = diff\n            diff = abs(tuples[i][1] - tuples[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n"}
{"task_id": "Mbpp/64", "completion": "\ndef subject_marks(lst):\n    return sorted(lst, key=lambda x: x[1])\n\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n"}
{"task_id": "Mbpp/65", "completion": "\ndef recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if type(i) == list:\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total\n"}
{"task_id": "Mbpp/66", "completion": "\ndef pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Test the function\nassert pos_count([1,-2,3,-4]) == 2\n"}
{"task_id": "Mbpp/67", "completion": "\ndef bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n# Test the function\nassert bell_number(2) == 2\n"}
{"task_id": "Mbpp/68", "completion": "\ndef is_Monotonic(arr):\n    if all(i < j for i, j in zip(arr, arr[1:])):\n        return True\n    elif all(i > j for i, j in zip(arr, arr[1:])):\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/69", "completion": "\ndef is_sublist(main_list, sublist):\n    return sublist in main_list\n"}
{"task_id": "Mbpp/70", "completion": "\ndef get_equal(tuples):\n    len_first = len(tuples[0])\n    for tup in tuples:\n        if len(tup) != len_first:\n            return False\n    return True\n"}
{"task_id": "Mbpp/71", "completion": "\ndef comb_sort(arr):\n    gap = len(arr)\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n"}
{"task_id": "Mbpp/72", "completion": "\ndef dif_Square(n):\n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if (i*i - j*j) == n:\n                return True\n            j += 1\n        i += 1\n    return False\n\nassert dif_Square(5) == True\n"}
{"task_id": "Mbpp/74", "completion": "\ndef is_samepatterns(patterns1, patterns2):\n    if len(patterns1) != len(patterns2):\n        return False\n\n    for i in range(len(patterns1)):\n        if patterns1[i] != patterns2[i]:\n            return False\n\n    return True\n"}
{"task_id": "Mbpp/75", "completion": "\ndef find_tuples(tuples, k):\n    result = []\n    for t in tuples:\n        if all(i % k == 0 for i in t):\n            result.append(t)\n    return result\n\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n"}
{"task_id": "Mbpp/77", "completion": "\ndef is_divisible_by_11(n):\n    return n % 11 == 0\n\nassert not is_divisible_by_11(12345)\n"}
{"task_id": "Mbpp/79", "completion": "\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\n\nassert word_len(\"Hadoop\") == False\n"}
{"task_id": "Mbpp/80", "completion": "\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n\n# Test\nassert tetrahedral_number(5) == 35\n"}
{"task_id": "Mbpp/82", "completion": "\nimport math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius**3)\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n"}
{"task_id": "Mbpp/83", "completion": "\ndef get_Char(s):\n    total = 0\n    for char in s:\n        total += ord(char) % 26\n    return chr(total % 26)\n\nassert get_Char(\"abc\") == \"f\"\n"}
{"task_id": "Mbpp/84", "completion": "\ndef sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        a, b = 1, 2\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b\n\nassert sequence(10) == 6\n"}
{"task_id": "Mbpp/85", "completion": "\nimport math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2\n"}
{"task_id": "Mbpp/86", "completion": "\ndef centered_hexagonal_number(n):\n    return n * (2 * n - 1)\n\n# Test\nassert centered_hexagonal_number(10) == 271\n"}
{"task_id": "Mbpp/87", "completion": "\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"}
{"task_id": "Mbpp/88", "completion": "\ndef freq_count(lst):\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n"}
{"task_id": "Mbpp/89", "completion": "\ndef closest_num(n):\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 0\n    else:\n        return n - 1\n\nassert closest_num(11) == 10\n"}
{"task_id": "Mbpp/90", "completion": "\ndef len_log(words):\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n"}
{"task_id": "Mbpp/91", "completion": "\ndef find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False\n\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n"}
{"task_id": "Mbpp/92", "completion": "\ndef is_undulating(n):\n    num_str = str(n)\n    for i in range(len(num_str) - 1):\n        if num_str[i] != num_str[i + 1]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/93", "completion": "\ndef power(a, b):\n    return a ** b\n"}
{"task_id": "Mbpp/94", "completion": "\ndef index_minimum(list_of_tuples):\n    return min(list_of_tuples, key=lambda x: x[1])[0]\n"}
{"task_id": "Mbpp/95", "completion": "\ndef Find_Min_Length(list_of_lists):\n    return min(len(lst) for lst in list_of_lists)\n"}
{"task_id": "Mbpp/96", "completion": "\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nassert divisor(15) == 4\n"}
{"task_id": "Mbpp/97", "completion": "\ndef frequency_lists(lst):\n    freq_dict = {}\n    for i in lst:\n        for j in i:\n            if j in freq_dict:\n                freq_dict[j] += 1\n            else:\n                freq_dict[j] = 1\n    return freq_dict\n"}
{"task_id": "Mbpp/98", "completion": "\nimport math\n\ndef multiply_num(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product / len(lst)\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n"}
{"task_id": "Mbpp/99", "completion": "\ndef decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n"}
{"task_id": "Mbpp/100", "completion": "\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(n):\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\nassert next_smallest_palindrome(99)==101\n"}
{"task_id": "Mbpp/101", "completion": "\ndef kth_element(arr, k):\n    return arr[k-1]\n\nassert kth_element([12,3,5,7,19], 2) == 3\n"}
{"task_id": "Mbpp/102", "completion": "\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() for x in word.split('_'))\n\n# Test\nassert snake_to_camel('python_program')=='PythonProgram'\n"}
{"task_id": "Mbpp/103", "completion": "\ndef eulerian_num(n, m):\n    if n == 1 and m == 1:\n        return 1\n    elif n > 1 and m == 1:\n        return 2 * eulerian_num(n-1, 1)\n    elif n == 1 and m > 1:\n        return 2 * eulerian_num(1, m-1)\n    elif n > 1 and m > 1:\n        return 2 * eulerian_num(n-1, m) + 2 * eulerian_num(n, m-1)\n\nassert eulerian_num(3, 1) == 4\n"}
{"task_id": "Mbpp/104", "completion": "\ndef sort_sublists(lists):\n    return [sorted(l) for l in lists]\n"}
{"task_id": "Mbpp/105", "completion": "\ndef count(lst):\n    return lst.count(True)\n"}
{"task_id": "Mbpp/106", "completion": "\ndef add_lists(lst, tpl):\n    return tpl + tuple(lst)\n\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n"}
{"task_id": "Mbpp/108", "completion": "\ndef merge_sorted_list(list1, list2, list3):\n    return sorted(list1 + list2 + list3)\n\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n"}
{"task_id": "Mbpp/109", "completion": "\ndef odd_Equivalent(binary_string, rotations):\n    # rotate the binary string\n    rotated_string = binary_string[rotations:] + binary_string[:rotations]\n    \n    # count the number of odd numbers\n    odd_count = sum(int(rotated_string[i]) for i in range(len(rotated_string)) if int(rotated_string[i]) % 2 != 0)\n    \n    return odd_count\n\n# test the function\nassert odd_Equivalent(\"011001\",6) == 3\n"}
{"task_id": "Mbpp/111", "completion": "\ndef common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements = common_elements.intersection(set(lst))\n    return list(common_elements)\n\nprint(set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12]))\n"}
{"task_id": "Mbpp/113", "completion": "\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": "Mbpp/115", "completion": "\ndef empty_dit(lst):\n    for dic in lst:\n        if dic:\n            return False\n    return True\n\nassert empty_dit([{},{},{}])==True\n"}
{"task_id": "Mbpp/116", "completion": "\ndef tuple_to_int(tup):\n    result = 0\n    for i in tup:\n        result = result * 10 + i\n    return result\n\nprint(tuple_to_int((1,2,3)))  # Output: 123\n"}
{"task_id": "Mbpp/117", "completion": "\ndef list_to_float(lst):\n    return [tuple(float(i) if isinstance(i, str) else i for i in sub_lst) for sub_lst in lst]\n\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n"}
{"task_id": "Mbpp/118", "completion": "\ndef string_to_list(s):\n    return s.split()\n\nassert string_to_list(\"python programming\")==['python','programming']\n"}
{"task_id": "Mbpp/119", "completion": "\ndef search(nums):\n    if len(nums) == 1:\n        return nums[0]\n    \n    low, high = 0, len(nums) - 1\n    \n    while low < high:\n        mid = (low + high) // 2\n        \n        if nums[mid] == nums[mid ^ 1]:\n            low = mid + 1\n        else:\n            high = mid\n            \n    return nums[low]\n\nassert search([1,1,2,2,3]) == 3\n"}
{"task_id": "Mbpp/120", "completion": "\ndef max_product_tuple(list_of_tuples):\n    max_product = float('-inf')\n    for tup in list_of_tuples:\n        product = tup[0] * tup[1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )) # should return 36\n"}
{"task_id": "Mbpp/123", "completion": "\ndef sum_of_div(n):\n    sum = 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            if i * (n // i) == n:\n                sum = sum + i + n//i\n            else:\n                sum = sum + i\n            i += 1\n    return sum\n\ndef amicable_numbers_sum(n):\n    sum = 0\n    for i in range(2, n+1):\n        sum += sum_of_div(i)\n    return sum\n\nassert amicable_numbers_sum(999)==504\n"}
{"task_id": "Mbpp/124", "completion": "\nimport math\n\ndef angle_complex(real, imag):\n    return math.atan2(imag, real)\n\n# Test\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n"}
{"task_id": "Mbpp/125", "completion": "\ndef find_length(s):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n"}
{"task_id": "Mbpp/126", "completion": "\ndef sum_of_common_divisors(x, y):\n    def get_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                if n // i == i:\n                    divisors.append(i)\n                else:\n                    divisors.extend([i, n // i])\n        return divisors\n\n    common_divisors = set(get_divisors(x)) & set(get_divisors(y))\n    return sum(common_divisors)\n\n\nassert sum_of_common_divisors(10, 15) == 6\n"}
{"task_id": "Mbpp/127", "completion": "\ndef multiply_int(a, b):\n    return a * b\n"}
{"task_id": "Mbpp/128", "completion": "\ndef long_words(n, sentence):\n    words = sentence.split()\n    return [word for word in words if len(word) > n]\n\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n"}
{"task_id": "Mbpp/129", "completion": "\ndef magic_square_test(matrix):\n    # Get the size of the square\n    size = len(matrix)\n\n    # Create a list to hold the row sums\n    row_sums = [0] * size\n\n    # Create a list to hold the column sums\n    col_sums = [0] * size\n\n    # Create a list to hold the main diagonal sum\n    diag_sum = 0\n\n    # Create a list to hold the secondary diagonal sum\n    diag2_sum = 0\n\n    # Loop through each cell in the matrix\n    for i in range(size):\n        for j in range(size):\n            # Add the value of the cell to the row sum\n            row_sums[i] += matrix[i][j]\n\n            # Add the value of the cell to the column sum\n            col_sums[j] += matrix[i][j]\n\n            # Add the value of the cell to the main diagonal sum\n            if i == j:\n                diag_sum += matrix[i][j]\n\n            # Add the value of the cell to the secondary diagonal sum\n            if i + j == size - 1:\n                diag2_sum += matrix[i][j]\n\n    # Check if all row sums, column sums, and diagonals are the same\n    for i in range(size):\n        if row_sums[i] != col_sums[i] or row_sums[i] != diag_sum or row_sums[i] != diag2_sum:\n            return False\n\n    return True\n"}
{"task_id": "Mbpp/130", "completion": "\ndef max_occurrences(lst):\n    count_dict = {}\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    max_freq = max(count_dict.values())\n    max_items = [k for k, v in count_dict.items() if v == max_freq]\n    return max_items[0]\n\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n"}
{"task_id": "Mbpp/131", "completion": "\ndef reverse_vowels(word):\n    vowels = \"aeiouAEIOU\"\n    word_list = list(word)\n    left, right = 0, len(word_list) - 1\n\n    while left < right:\n        if word_list[left] not in vowels:\n            left += 1\n        elif word_list[right] not in vowels:\n            right -= 1\n        else:\n            word_list[left], word_list[right] = word_list[right], word_list[left]\n            left, right = left + 1, right - 1\n\n    return \"\".join(word_list)\n"}
{"task_id": "Mbpp/132", "completion": "\ndef tup_string(tup):\n    return ''.join(tup)\n\n# Test the function\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n"}
{"task_id": "Mbpp/133", "completion": "\ndef sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n\n# Test the function\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n"}
{"task_id": "Mbpp/135", "completion": "\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n\nassert hexagonal_num(10) == 190\n"}
{"task_id": "Mbpp/137", "completion": "\nimport math\n\ndef zero_count(arr):\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    return zeroes / non_zeroes if non_zeroes != 0 else float('inf')\n\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n"}
{"task_id": "Mbpp/138", "completion": "\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    while n % 2 == 0:\n        n = n / 2\n    return n == 1\n"}
{"task_id": "Mbpp/139", "completion": "\nimport math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n"}
{"task_id": "Mbpp/140", "completion": "\ndef extract_singly(lst):\n    flat_list = []\n    for sublist in lst:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n\n# Test the function\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n"}
{"task_id": "Mbpp/141", "completion": "\ndef pancake_sort(arr):\n    n = len(arr)\n    for i in range(n, 0, -2):\n        m = arr.index(max(arr[:i]))\n        arr[0:i] = arr[0:i][::-1]\n        if i > 1:\n            arr[0:i-1] = arr[0:i-1][::-1]\n    return arr\n\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n"}
{"task_id": "Mbpp/142", "completion": "\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/143", "completion": "\ndef find_lists(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, list):\n            count += 1\n    return count\n\n# Test the function\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n"}
{"task_id": "Mbpp/145", "completion": "\ndef max_Abs_Diff(arr):\n    max_diff = 0\n    min_val = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] - min_val > max_diff:\n            max_diff = arr[i] - min_val\n\n        if arr[i] < min_val:\n            min_val = arr[i]\n\n    return max_diff\n"}
{"task_id": "Mbpp/160", "completion": "\ndef find_solution(a, b, n):\n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        return (0, n // b)\n    elif b == 0:\n        return (n // a, 0)\n    else:\n        x = n // a\n        y = (n - x * a) // b\n        return (x, y)\n\nassert find_solution(2, 3, 7) == (2, 1)\n"}
{"task_id": "Mbpp/161", "completion": "\ndef remove_elements(lst, remove):\n    return [x for x in lst if x not in remove]\n\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n"}
{"task_id": "Mbpp/162", "completion": "\ndef sum_series(n):\n    return sum(i for i in range(n + 1) if i <= n // 2)\n\nassert sum_series(6) == 12\n"}
{"task_id": "Mbpp/164", "completion": "\ndef are_equivalent(a, b):\n    def sum_of_divisors(n):\n        result = 1\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                if i * (n // i) == n:\n                    result += i + n//i\n                else:\n                    result += i\n                i += 1\n        return result\n\n    return sum_of_divisors(a) == sum_of_divisors(b)\n"}
{"task_id": "Mbpp/165", "completion": "\ndef count_char_position(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isalpha() and s[i].lower() == chr(97 + i % 26).lower():\n            count += 1\n    return count\n\nprint(count_char_position(\"xbcefg\"))  # Output: 2\n"}
{"task_id": "Mbpp/166", "completion": "\ndef find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/167", "completion": "\ndef next_power_of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        return 2**(n.bit_length() - 1)\n\n# Test the function\nassert next_power_of_2(0) == 1\n"}
{"task_id": "Mbpp/168", "completion": "\ndef frequency(lst, num):\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count\n\n# Test the function\nassert frequency([1,2,3], 4) == 0\n"}
{"task_id": "Mbpp/170", "completion": "\ndef sum_range_list(lst, start_index, end_index):\n    return sum(lst[start_index:end_index+1])\n\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n"}
{"task_id": "Mbpp/171", "completion": "\ndef perimeter_pentagon(side_length):\n    return 5 * side_length\n"}
{"task_id": "Mbpp/172", "completion": "\ndef count_occurance(s):\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] == 'std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count\n"}
{"task_id": "Mbpp/222", "completion": "\ndef check_type(input_tuple):\n    if len(input_tuple) == 0:\n        return True\n    first_type = type(input_tuple[0])\n    for i in range(1, len(input_tuple)):\n        if type(input_tuple[i]) != first_type:\n            return False\n    return True\n"}
{"task_id": "Mbpp/223", "completion": "\ndef is_majority(arr, n, elem):\n    # Since the array is sorted, we can use binary search to find the element\n    # First, we find the index of the element in the array\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < elem:\n            left = mid + 1\n        elif arr[mid] > elem:\n            right = mid - 1\n        else:\n            break\n    else:\n        # If the element is not found, we return False\n        return False\n\n    # We then count the number of occurrences of the element in the array\n    count = 1\n    i = mid\n    while i < n and arr[i] == elem:\n        count += 1\n        i += 1\n    i = mid - 1\n    while i >= 0 and arr[i] == elem:\n        count += 1\n        i -= 1\n\n    # Finally, we check if the count is greater than n/2\n    return count > n // 2\n"}
{"task_id": "Mbpp/224", "completion": "\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n = n >> 1\n    return count\n"}
{"task_id": "Mbpp/226", "completion": "\ndef odd_values_string(s):\n    return ''.join(c for i, c in enumerate(s) if i % 2 == 0)\n\nassert odd_values_string('abcdef') == 'ace'\n"}
{"task_id": "Mbpp/227", "completion": "\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n"}
{"task_id": "Mbpp/229", "completion": "\ndef re_arrange_array(arr, n):\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    return negatives + positives\n"}
{"task_id": "Mbpp/230", "completion": "\ndef replace_blank(string, char):\n    return string.replace(\" \", char)\n\n# Test the function\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n"}
{"task_id": "Mbpp/232", "completion": "\ndef larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]\n\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n"}
{"task_id": "Mbpp/233", "completion": "\nimport math\n\ndef lateralsuface_cylinder(radius, height):\n    lateral_surface_area = 2 * math.pi * radius * height\n    return lateral_surface_area\n"}
{"task_id": "Mbpp/234", "completion": "\ndef volume_cube(side):\n    return side ** 3\n"}
{"task_id": "Mbpp/235", "completion": "\ndef even_bit_set_number(n):\n    mask = n\n    while mask != 0:\n        mask = mask & (mask - 1)\n    return n | mask\n"}
{"task_id": "Mbpp/237", "completion": "\ndef check_occurences(lst):\n    count_dict = {}\n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n"}
{"task_id": "Mbpp/238", "completion": "\ndef number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count += 1\n    return count\n\nassert number_of_substrings(\"abc\") == 6\n"}
{"task_id": "Mbpp/239", "completion": "\ndef get_total_number_of_sequences(m, n):\n    if n == 1:\n        return min(m, 2)\n    elif n == 2:\n        return min(m, 3)\n    else:\n        dp = [0] * (n + 1)\n        dp[1] = min(m, 2)\n        dp[2] = min(m, 3)\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]\n\nassert get_total_number_of_sequences(10, 4) == 4\n"}
{"task_id": "Mbpp/240", "completion": "\ndef replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1\n\nprint(replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])) # should return [1, 3, 5, 7, 9, 2, 4, 6, 8]\n"}
{"task_id": "Mbpp/242", "completion": "\ndef count_charac(string):\n    return len(string)\n\n# Test the function\nassert count_charac(\"python programming\")==18\n"}
{"task_id": "Mbpp/244", "completion": "\ndef next_Perfect_Square(n):\n    i = n + 1\n    while True:\n        if (i ** 0.5).is_integer():\n            return i\n        i += 1\n\nassert next_Perfect_Square(35) == 36\n"}
{"task_id": "Mbpp/245", "completion": "\ndef max_sum(arr):\n    n = len(arr)\n    max_sum = [0]*n\n    min_sum = [0]*n\n\n    max_sum[0] = arr[0]\n    for i in range(1, n):\n        max_sum[i] = max(max_sum[i-1], arr[i])\n\n    min_sum[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        min_sum[i] = min(min_sum[i+1], arr[i])\n\n    bitonic_sum = 0\n    for i in range(n):\n        bitonic_sum += max(max_sum[i], min_sum[i])\n\n    return bitonic_sum\n\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n"}
{"task_id": "Mbpp/247", "completion": "\ndef lps(s):\n    n = len(s)\n\n    # Create a table to store subsequences lengths\n    L = [[0 for x in range(n)] for x in range(n)]\n\n    # Strings of length 1 are palindromes of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Consider all substrings\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                L[i][j] = 2\n            elif s[i] == s[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\n    # Length of the longest palindromic subsequence\n    return L[0][n - 1]\n\n# Test the function\nassert lps(\"TENS FOR TENS\") == 5\n"}
{"task_id": "Mbpp/249", "completion": "\ndef intersection_array(lst1, lst2): \n    return list(filter(lambda x: x in lst1, lst2)) \n\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])) # Output: [1, 2, 8, 9]\n"}
{"task_id": "Mbpp/250", "completion": "\ndef count_X(tupleX, element):\n    count = 0\n    for i in tupleX:\n        if i == element:\n            count += 1\n    return count\n\n# Test the function\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n"}
{"task_id": "Mbpp/251", "completion": "\ndef insert_element(lst, element):\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result\n"}
{"task_id": "Mbpp/252", "completion": "\nimport cmath\n\ndef convert(num):\n    return cmath.polar(num)\n\nassert convert(1) == (1.0, 0.0)\n"}
{"task_id": "Mbpp/253", "completion": "\ndef count_integer(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/255", "completion": "\nfrom itertools import product\n\ndef combinations_colors(lst, n):\n    return list(product(lst, repeat=n))\n"}
{"task_id": "Mbpp/256", "completion": "\ndef count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\n\nassert count_Primes_nums(5) == 2\n"}
{"task_id": "Mbpp/257", "completion": "\ndef swap_numbers(num1, num2):\n    return (num2, num1)\n"}
{"task_id": "Mbpp/259", "completion": "\ndef maximize_elements(t1, t2):\n    result = []\n    for a, b in zip(t1, t2):\n        result.append((max(a[0], b[0]), max(a[1], b[1])))\n    return tuple(result)\n\nprint(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))\n"}
{"task_id": "Mbpp/260", "completion": "\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    count = 0\n    number = 1\n    while count < n:\n        number += 1\n        if is_prime(number):\n            count += 1\n    return number\n\nassert newman_prime(3) == 7\n"}
{"task_id": "Mbpp/261", "completion": "\ndef division_elements(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append(t1[i] / t2[i])\n    return tuple(result)\n\nprint(division_elements((10, 4, 6, 9), (5, 2, 3, 3)))  # Output: (2.0, 2.0, 2.0, 3.0)\n"}
{"task_id": "Mbpp/262", "completion": "\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n"}
{"task_id": "Mbpp/264", "completion": "\ndef dog_age(human_years):\n    return human_years * 7\n"}
{"task_id": "Mbpp/265", "completion": "\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n"}
{"task_id": "Mbpp/266", "completion": "\ndef lateralsurface_cube(side):\n    return 6 * side ** 2\n"}
{"task_id": "Mbpp/267", "completion": "\ndef square_Sum(n):\n    sum_square = 0\n    for i in range(1, 2*n+1, 2):\n        sum_square += i**2\n    return sum_square\n\n# Test the function\nassert square_Sum(2) == 10\n"}
{"task_id": "Mbpp/268", "completion": "\ndef find_star_num(n):\n    star_num = 0\n    for i in range(1, n+1):\n        star_num += i\n    return star_num\n\nassert find_star_num(3) == 37\n"}
{"task_id": "Mbpp/269", "completion": "\ndef ascii_value(char):\n    return ord(char)\n"}
{"task_id": "Mbpp/270", "completion": "\ndef sum_even_and_even_index(lst):\n    return sum(value for index, value in enumerate(lst) if index % 2 == 0 and value % 2 == 0)\n\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n"}
{"task_id": "Mbpp/271", "completion": "\ndef even_Power_Sum(n):\n    result = 0\n    for i in range(2, 2*n+1, 2):\n        result += i ** 5\n    return result\n\n# Test the function\nassert even_Power_Sum(2) == 1056\n"}
{"task_id": "Mbpp/272", "completion": "\ndef rear_extract(list_of_tuples):\n    return [t[2] for t in list_of_tuples]\n\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n"}
{"task_id": "Mbpp/273", "completion": "\ndef substract_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] - tuple2[i])\n    return tuple(result)\n\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n"}
{"task_id": "Mbpp/274", "completion": "\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += binomial_coefficient(n, i)\n    return sum\n\ndef binomial_coefficient(n, k):\n    if k > n:\n        return 0\n    if k > n-k:\n        k = n-k\n    x = 1\n    y = 1\n    for i in range(1,k+1):\n        x = (x*(n+1-i))//i\n        y = (y*i)//(n+1-i)\n    return x\n\nassert even_binomial_Coeff_Sum(4) == 8\n"}
{"task_id": "Mbpp/276", "completion": "\nimport math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height\n"}
{"task_id": "Mbpp/277", "completion": "\ndef dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}\n\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n"}
{"task_id": "Mbpp/278", "completion": "\ndef count_first_elements(t):\n    count = 0\n    for i in t:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n\nprint(count_first_elements((1, 5, 7, (4, 6), 10)))  # Output: 3\n"}
{"task_id": "Mbpp/279", "completion": "\ndef is_num_decagonal(n):\n    return n * (7 * n - 5) // 2\n"}
{"task_id": "Mbpp/280", "completion": "\ndef sequential_search(arr, ele):\n    for i in range(len(arr)):\n        if arr[i] == ele:\n            return (True, i)\n    return (False, -1)\n\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n"}
{"task_id": "Mbpp/281", "completion": "\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n"}
{"task_id": "Mbpp/282", "completion": "\ndef sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]\n"}
{"task_id": "Mbpp/283", "completion": "\ndef validate(n):\n    for digit in str(n):\n        if int(digit) > n.count(digit):\n            return False\n    return True\n\nassert validate(1234) == True\n"}
{"task_id": "Mbpp/284", "completion": "\ndef check_element(lst, element):\n    return all(item == element for item in lst)\n"}
{"task_id": "Mbpp/285", "completion": "\ndef text_match_two_three(s):\n    if 'a' in s:\n        if s.count('b') == 2 or s.count('b') == 3:\n            return True\n    return False\n"}
{"task_id": "Mbpp/286", "completion": "\ndef max_sub_array_sum_repeated(arr, k, n):\n    repeated_arr = arr * k\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(n):\n        current_sum += repeated_arr[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum\n"}
{"task_id": "Mbpp/287", "completion": "\ndef square_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i*i\n    return sum\n\nassert square_Sum(2) == 20\n"}
{"task_id": "Mbpp/290", "completion": "\ndef max_length(lst):\n    max_length = 0\n    max_list = []\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n    return max_length, max_list\n"}
{"task_id": "Mbpp/292", "completion": "\ndef find(num1, num2):\n    return num1 // num2\n"}
{"task_id": "Mbpp/293", "completion": "\nimport math\n\ndef otherside_rightangle(a, b):\n    # calculate the third side using the Pythagorean theorem\n    c = math.sqrt(a**2 + b**2)\n    return c\n\n# test the function\nassert otherside_rightangle(7,8)==10.63014581273465\n"}
{"task_id": "Mbpp/294", "completion": "\ndef max_val(lst):\n    return max(x for x in lst if isinstance(x, int))\n\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n"}
{"task_id": "Mbpp/295", "completion": "\ndef sum_div(n):\n    result = 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            if i * (n // i) == n:\n                result = result + i + n//i\n            else:\n                result = result + i\n            i += 1\n    return result\n\nprint(sum_div(8))  # Output: 7\n"}
{"task_id": "Mbpp/296", "completion": "\ndef get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\nassert get_Inv_Count([1,20,6,4,5]) == 5\n"}
{"task_id": "Mbpp/297", "completion": "\ndef flatten_list(nested_list):\n    flattened_list = []\n    for i in nested_list:\n        if isinstance(i, list):\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list\n"}
{"task_id": "Mbpp/299", "completion": "\ndef max_aggregate(lst):\n    d = {}\n    for name, score in lst:\n        if name in d:\n            d[name] += score\n        else:\n            d[name] = score\n    max_score = max(d.values())\n    max_names = [name for name, score in d.items() if score == max_score]\n    return (max_names[0], max_score)\n\nprint(max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]))\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n"}
{"task_id": "Mbpp/300", "completion": "\nimport math\n\ndef count_binary_seq(n):\n    if n == 1:\n        return 2\n    else:\n        return 2 * count_binary_seq(n - 1)\n\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n"}
{"task_id": "Mbpp/301", "completion": "\ndef dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())\n\n# Test\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n"}
{"task_id": "Mbpp/305", "completion": "\ndef start_withp(words):\n    words_start_with_p = [word for word in words if word.startswith('p')]\n    if len(words_start_with_p) >= 2:\n        return words_start_with_p[0], words_start_with_p[1]\n    else:\n        return None\n"}
{"task_id": "Mbpp/306", "completion": "\ndef max_sum_increasing_subseq(arr, n, i, k):\n    if i > n or k > n or i < 0 or k < 0 or n < 0:\n        return \"Invalid Input\"\n\n    dp = [0]*n\n    for i in range(n):\n        dp[i] = arr[i]\n        \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n    \n    if k > i:\n        return max(dp[i], dp[k])\n    else:\n        return dp[i]\n\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11\n"}
{"task_id": "Mbpp/308", "completion": "\ndef large_product(lst1, lst2, n):\n    products = sorted([a*b for a in lst1 for b in lst2], reverse=True)\n    return products[:n]\n\nprint(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)) # [60, 54, 50]\n"}
{"task_id": "Mbpp/309", "completion": "\ndef maximum(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2\n"}
{"task_id": "Mbpp/310", "completion": "\ndef string_to_tuple(s):\n    return tuple(s)\n\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n"}
{"task_id": "Mbpp/311", "completion": "\ndef set_left_most_unset_bit(n):\n    return n | (1 << n.bit_length() - 1)\n"}
{"task_id": "Mbpp/312", "completion": "\nimport math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height\n\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n"}
{"task_id": "Mbpp/388", "completion": "\ndef highest_Power_of_2(n):\n    i = 0\n    while (2 ** i) <= n:\n        i += 1\n    return 2 ** (i - 1)\n\n\nassert highest_Power_of_2(10) == 8\n"}
{"task_id": "Mbpp/389", "completion": "\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\nassert find_lucas(9) == 76\n"}
{"task_id": "Mbpp/390", "completion": "\ndef add_string(my_list, format_string):\n    return [format_string.format(i) for i in my_list]\n\n# Test the function\nassert add_string([1,2,3,4],'temp{}')==['temp1', 'temp2', 'temp3', 'temp4']\n"}
{"task_id": "Mbpp/391", "completion": "\ndef convert_list_dictionary(keys, values, scores):\n    result = []\n    for i in range(len(keys)):\n        inner_dict = {}\n        inner_dict[keys[i]] = {values[i]: scores[i]}\n        result.append(inner_dict)\n    return result\n"}
{"task_id": "Mbpp/392", "completion": "\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n"}
{"task_id": "Mbpp/394", "completion": "\ndef check_distinct(input_tuple):\n    return len(input_tuple) == len(set(input_tuple))\n"}
{"task_id": "Mbpp/395", "completion": "\ndef first_non_repeating_character(s):\n    char_count = {}\n    \n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in s:\n        if char_count[char] == 1:\n            return char\n\n    return None\n"}
{"task_id": "Mbpp/396", "completion": "\ndef check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n"}
{"task_id": "Mbpp/397", "completion": "\ndef median_numbers(num1, num2, num3):\n    nums = [num1, num2, num3]\n    nums.sort()\n    return nums[1]\n"}
{"task_id": "Mbpp/398", "completion": "\ndef sum_of_digits(lst):\n    return sum(int(digit) for number in lst for digit in str(number))\n\nprint(sum_of_digits([10,2,56]))  # Output: 14\n"}
{"task_id": "Mbpp/400", "completion": "\ndef extract_freq(lst):\n    unique_tuples = set(lst)\n    return len(unique_tuples)\n\nprint(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]))  # Output: 3\n"}
{"task_id": "Mbpp/404", "completion": "\ndef minimum(num1, num2):\n    if num1 < num2:\n        return num1\n    else:\n        return num2\n"}
{"task_id": "Mbpp/405", "completion": "\ndef check_tuplex(tup, elem):\n    return elem in tup\n\n# Test the function\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n"}
{"task_id": "Mbpp/406", "completion": "\ndef find_Parity(n):\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n"}
{"task_id": "Mbpp/407", "completion": "\ndef rearrange_bigger(n):\n    # Convert the number into a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # Sort the digits in ascending order\n    digits.sort()\n    \n    # Check if the number is already the biggest possible\n    if digits[-1] == 9 and digits[-2] == 9 and len(digits) > 2:\n        return -1\n    \n    # Increment the last digit\n    digits[-1] += 1\n    \n    # Carry over if the last digit is 10\n    if digits[-1] == 10:\n        digits[-1] = 0\n        digits[-2] += 1\n    \n    # Return the rearranged number\n    return int(''.join([str(d) for d in digits]))\n\n# Test the function\nassert rearrange_bigger(12)==21\n"}
{"task_id": "Mbpp/409", "completion": "\ndef min_product_tuple(list_tuples):\n    min_product = float('inf')\n    for tup in list_tuples:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n    return min_product\n\nprint(min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )) # Output: 8\n"}
{"task_id": "Mbpp/410", "completion": "\ndef min_val(lst):\n    return min(x for x in lst if isinstance(x, (int, float)))\n\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n"}
{"task_id": "Mbpp/412", "completion": "\ndef remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]\n\nassert remove_odd([1,2,3]) == [2]\n"}
{"task_id": "Mbpp/413", "completion": "\ndef extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]\n"}
{"task_id": "Mbpp/414", "completion": "\ndef overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\n\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n"}
{"task_id": "Mbpp/415", "completion": "\ndef max_Product(nums):\n    nums.sort()\n    return (nums[-1], nums[-2]) if nums[-1] > 0 else (nums[0], nums[1])\n\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n"}
{"task_id": "Mbpp/418", "completion": "\ndef Find_Max(lst):\n    max_length = -1\n    max_element = []\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n"}
{"task_id": "Mbpp/419", "completion": "\ndef round_and_sum(lst):\n    rounded_list = [round(num) for num in lst]\n    total_sum = sum(rounded_list)\n    return total_sum * len(rounded_list)\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n"}
{"task_id": "Mbpp/420", "completion": "\ndef cube_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum\n\nassert cube_Sum(2) == 72\n"}
{"task_id": "Mbpp/421", "completion": "\ndef concatenate_tuple(tup):\n    return '-'.join(map(str, tup))\n\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n"}
{"task_id": "Mbpp/422", "completion": "\ndef find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n\n\n# Test the function\nassert find_Average_Of_Cube(2) == 4.5\n"}
{"task_id": "Mbpp/424", "completion": "\ndef extract_rear(tuple_str):\n    return [word[-1] for word in tuple_str]\n\n# Test the function\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n"}
{"task_id": "Mbpp/425", "completion": "\ndef count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Test the function\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n"}
{"task_id": "Mbpp/426", "completion": "\ndef filter_oddnumbers(num_list):\n    return [num for num in num_list if num % 2 != 0]\n\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n"}
{"task_id": "Mbpp/427", "completion": "\nfrom datetime import datetime\n\ndef change_date_format(date_str):\n    date_obj = datetime.strptime(date_str, '%Y-%m-%d')\n    return date_obj.strftime('%d-%m-%Y')\n\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n"}
{"task_id": "Mbpp/428", "completion": "\ndef shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n"}
{"task_id": "Mbpp/429", "completion": "\ndef and_tuples(t1, t2):\n    result = []\n    for a, b in zip(t1, t2):\n        result.append(a & b)\n    return tuple(result)\n\nprint(and_tuples((10, 4, 6, 9), (5, 2, 3, 3)))  # Output: (0, 0, 2, 1)\n"}
{"task_id": "Mbpp/430", "completion": "\ndef parabola_directrix(a,b,c):\n    #ax^2+bx+c=0\n    #The directrix of a parabola is given by the formula:\n    #D = -b/(2*a)\n    return -b/(2*a)\n\nprint(parabola_directrix(5,3,2)) #-198\n"}
{"task_id": "Mbpp/431", "completion": "\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"}
{"task_id": "Mbpp/432", "completion": "\ndef median_trapezium(a,b,c):\n    return (a+b+c)/3\n"}
{"task_id": "Mbpp/433", "completion": "\ndef check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return True\n    return False\n\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n"}
{"task_id": "Mbpp/435", "completion": "\ndef last_Digit(n):\n    return n % 10\n"}
{"task_id": "Mbpp/436", "completion": "\ndef neg_nos(lst):\n    return [num for num in lst if num < 0]\n\n# Test the function\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n"}
{"task_id": "Mbpp/437", "completion": "\ndef remove_odd(s):\n    return \"\".join([ch for i, ch in enumerate(s) if (i+1)%2==0])\n\nprint(remove_odd(\"python\"))  # Output: 'yhn'\n"}
{"task_id": "Mbpp/438", "completion": "\ndef count_bidirectional(tuples):\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i][0] == tuples[j][1] and tuples[i][1] == tuples[j][0]:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/439", "completion": "\ndef multiple_to_single(nums):\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n\nassert multiple_to_single([11, 33, 50])==113350\n"}
{"task_id": "Mbpp/440", "completion": "\nimport re\n\ndef find_adverb_position(sentence):\n    adverb = re.search(r'\\b\\w+ly\\b', sentence)\n    if adverb:\n        start_pos = adverb.start()\n        end_pos = adverb.end()\n        adverb_word = adverb.group()\n        return (start_pos, end_pos, adverb_word)\n    else:\n        return None\n\nprint(find_adverb_position(\"clearly!! we can see the sky\"))\n"}
{"task_id": "Mbpp/441", "completion": "\ndef surfacearea_cube(size):\n    return 6 * size ** 2\n"}
{"task_id": "Mbpp/442", "completion": "\ndef positive_count(arr):\n    pos, neg, zero = 0, 0, 0\n    size = len(arr)\n    for i in range(size):\n        if arr[i] > 0:\n            pos += 1\n        elif arr[i] < 0:\n            neg += 1\n        else:\n            zero += 1\n    return (pos / size) if size != 0 else 0\n\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n"}
{"task_id": "Mbpp/445", "completion": "\ndef index_multiplication(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append((t1[i][0]*t2[i][0], t1[i][1]*t2[i][1]))\n    return tuple(result)\n\nprint(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ))\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n"}
{"task_id": "Mbpp/446", "completion": "\ndef count_Occurrence(my_tuple, my_list):\n    count = 0\n    for i in my_list:\n        count += my_tuple.count(i)\n    return count\n\n# Test the function\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n"}
{"task_id": "Mbpp/447", "completion": "\ndef cube_nums(lst):\n    return [num**3 for num in lst]\n\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n"}
{"task_id": "Mbpp/448", "completion": "\ndef cal_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * cal_sum(n - 1) + cal_sum(n - 2)\n\nassert cal_sum(9) == 49\n"}
{"task_id": "Mbpp/450", "completion": "\ndef extract_string(string_list, size):\n    return string_list[-size:]\n\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n"}
{"task_id": "Mbpp/451", "completion": "\ndef remove_whitespaces(s):\n    return s.replace(' ', '')\n"}
{"task_id": "Mbpp/453", "completion": "\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\nassert sumofFactors(18) == 26\n"}
{"task_id": "Mbpp/454", "completion": "\ndef text_match_wordz(text):\n    if 'z' in text:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/455", "completion": "\ndef check_monthnumb_number(month_number):\n    thirty_one_days_months = [4, 6, 9, 11]\n    return month_number in thirty_one_days_months\n"}
{"task_id": "Mbpp/456", "completion": "\ndef reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]\n\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n"}
{"task_id": "Mbpp/457", "completion": "\ndef Find_Min(lst):\n    return min(lst, key=len)\n\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n"}
{"task_id": "Mbpp/458", "completion": "\ndef rectangle_area(length, width):\n    return length * width\n"}
{"task_id": "Mbpp/459", "completion": "\ndef remove_uppercase(s):\n    return ''.join(c for c in s if not c.isupper())\n\nprint(remove_uppercase('cAstyoUrFavoRitETVshoWs'))  # Output: 'cstyoravoitshos'\n"}
{"task_id": "Mbpp/460", "completion": "\ndef Extract(lst):\n    return [sublist[0] for sublist in lst]\n"}
{"task_id": "Mbpp/461", "completion": "\ndef upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n\n# Test the function\nassert upper_ctr('PYthon') == 1\n"}
{"task_id": "Mbpp/462", "completion": "\nfrom itertools import combinations\n\ndef combinations_list(lst):\n    result = []\n    for i in range(len(lst) + 1):\n        combinations_object = combinations(lst, i)\n        combination_list = [list(combination_tuple) for combination_tuple in combinations_object]\n        result.append(combination_list)\n    return result\n"}
{"task_id": "Mbpp/463", "completion": "\ndef max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n\n        result = max(result, max_product)\n\n    return result\n"}
{"task_id": "Mbpp/465", "completion": "\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n"}
{"task_id": "Mbpp/468", "completion": "\ndef max_product(nums):\n    if not nums:\n        return 0\n\n    max_prod = min_prod = result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < max_prod:\n            max_prod, min_prod = min_prod, max_prod\n\n        max_prod = max(nums[i], max_prod * nums[i])\n        min_prod = min(nums[i], min_prod * nums[i])\n\n        result = max(result, max_prod)\n\n    return result\n"}
{"task_id": "Mbpp/470", "completion": "\ndef add_pairwise(tup):\n    result = []\n    for i in range(len(tup)-1):\n        result.append(tup[i] + tup[i+1])\n    return tuple(result)\n\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n"}
{"task_id": "Mbpp/471", "completion": "\ndef find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9\n"}
{"task_id": "Mbpp/472", "completion": "\ndef check_Consecutive(lst):\n    return all(lst[i] == lst[i-1] + 1 for i in range(1, len(lst)))\n"}
{"task_id": "Mbpp/473", "completion": "\ndef tuple_intersection(tpl_list1, tpl_list2):\n    set1 = set(tuple(sorted(tpl)) for tpl in tpl_list1)\n    set2 = set(tuple(sorted(tpl)) for tpl in tpl_list2)\n    return set1 & set2\n\nprint(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n"}
{"task_id": "Mbpp/474", "completion": "\ndef replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)\n\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n"}
{"task_id": "Mbpp/475", "completion": "\ndef sort_counter(dict):\n    return sorted(dict.items(), key=lambda item: item[1])\n\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n"}
{"task_id": "Mbpp/476", "completion": "\ndef big_sum(arr):\n    if len(arr) < 1:\n        return 0\n    min_val = min(arr)\n    max_val = max(arr)\n    return min_val + max_val\n"}
{"task_id": "Mbpp/477", "completion": "\ndef is_lower(s):\n    return s.lower()\n\nassert is_lower(\"InValid\") == \"invalid\"\n"}
{"task_id": "Mbpp/478", "completion": "\ndef remove_lowercase(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char\n    return result\n"}
{"task_id": "Mbpp/479", "completion": "\ndef first_Digit(n):\n    while n >= 10:\n        n /= 10\n    return int(n)\n\nassert first_Digit(123) == 1\n"}
{"task_id": "Mbpp/554", "completion": "\ndef Split(nums):\n    return [num for num in nums if num % 2 != 0]\n\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n"}
{"task_id": "Mbpp/555", "completion": "\ndef difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum([i for i in range(1, n+1)])\n    return sum_of_cubes - sum_of_numbers\n\n# Test the function\nassert difference(3) == 30\n"}
{"task_id": "Mbpp/556", "completion": "\ndef find_Odd_Pair(arr, n):\n    res = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) & 1:\n                res += 1\n    return res\n\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n"}
{"task_id": "Mbpp/557", "completion": "\ndef toggle_string(s):\n    return s.swapcase()\n\nassert toggle_string(\"Python\")==(\"pYTHON\")\n"}
{"task_id": "Mbpp/558", "completion": "\ndef digit_distance_nums(num1, num2):\n    sum_diff = 0\n    num1_digits = [int(d) for d in str(num1)]\n    num2_digits = [int(d) for d in str(num2)]\n\n    for i in range(len(num1_digits)):\n        sum_diff += abs(num1_digits[i] - num2_digits[i])\n\n    return sum_diff\n"}
{"task_id": "Mbpp/559", "completion": "\ndef max_sub_array_sum(nums, limit):\n    max_sum = current_sum = nums[0]\n    start = end = 0\n    for i in range(1, len(nums)):\n        if nums[i] > current_sum + nums[i]:\n            start = i\n            current_sum = nums[i]\n        else:\n            current_sum += nums[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            end = i\n    if end - start + 1 > limit:\n        return max_sum\n    else:\n        return max_sum - nums[start]\n\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n"}
{"task_id": "Mbpp/560", "completion": "\ndef union_elements(t1, t2):\n    union_set = set(t1) | set(t2)\n    return tuple(sorted(union_set))\n\nprint(union_elements((3, 4, 5, 6),(5, 7, 4, 10)))\n"}
{"task_id": "Mbpp/562", "completion": "\ndef Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        max_length = max(max_length, len(sublist))\n    return max_length\n"}
{"task_id": "Mbpp/563", "completion": "\nimport re\n\ndef extract_values(string):\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, string)\n"}
{"task_id": "Mbpp/564", "completion": "\ndef count_Pairs(lst, k):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n\nprint(count_Pairs([1,2,1],3)) # Output: 2\n"}
{"task_id": "Mbpp/565", "completion": "\ndef split(s):\n    return list(s)\n\nassert split('python') == ['p','y','t','h','o','n']\n"}
{"task_id": "Mbpp/566", "completion": "\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n"}
{"task_id": "Mbpp/567", "completion": "\ndef issort_list(lst):\n    return lst == sorted(lst)\n"}
{"task_id": "Mbpp/568", "completion": "\ndef empty_list(N):\n    return [{} for _ in range(N)]\n"}
{"task_id": "Mbpp/569", "completion": "\ndef sort_sublists(lists):\n    for i in range(len(lists)):\n        lists[i].sort()\n    return lists\n"}
{"task_id": "Mbpp/572", "completion": "\ndef two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n"}
{"task_id": "Mbpp/573", "completion": "\ndef unique_product(lst):\n    unique_nums = set(lst)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n"}
{"task_id": "Mbpp/574", "completion": "\ndef surfacearea_cylinder(radius, height):\n    from math import pi\n    return 2*pi*radius*(radius+height)\n\nassert surfacearea_cylinder(10,5)==942.45\n"}
{"task_id": "Mbpp/576", "completion": "\ndef is_Sub_Array(a, b):\n    return b in a\n\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n"}
{"task_id": "Mbpp/577", "completion": "\ndef last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n        while factorial % 10 == 0:\n            factorial //= 10\n        factorial %= 10\n    return factorial\n\nassert last_Digit_Factorial(4) == 4\n"}
{"task_id": "Mbpp/578", "completion": "\ndef interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n"}
{"task_id": "Mbpp/579", "completion": "\ndef find_dissimilar(t1, t2):\n    return tuple(x for x in t1 if x not in t2) + tuple(x for x in t2 if x not in t1)\n\nprint(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)))  # Output: (3, 6, 7, 10)\n"}
{"task_id": "Mbpp/580", "completion": "\ndef extract_even(nested_tuple):\n    result = []\n    for i in nested_tuple:\n        if type(i) == tuple:\n            result.append(extract_even(i))\n        elif i % 2 == 0:\n            result.append(i)\n    return tuple(result)\n"}
{"task_id": "Mbpp/581", "completion": "\ndef surface_Area(base, height):\n    return (base * height) + (base * base)\n\n# Test\nassert surface_Area(3,4) == 33\n"}
{"task_id": "Mbpp/582", "completion": "\ndef my_dict(dic):\n    if dic:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/583", "completion": "\ndef catalan_number(n):\n    if n <=1 :\n        return 1\n    else:\n        res = 0\n        for i in range(n):\n            res += catalan_number(i) * catalan_number(n-i-1)\n        return res\n\nassert catalan_number(10)==16796\n"}
{"task_id": "Mbpp/585", "completion": "\ndef expensive_items(data, n):\n    # Sort the data in descending order based on price\n    sorted_data = sorted(data, key=lambda x: x['price'], reverse=True)\n    # Return the first n items from the sorted data\n    return sorted_data[:n]\n"}
{"task_id": "Mbpp/586", "completion": "\ndef split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n"}
{"task_id": "Mbpp/587", "completion": "\ndef list_tuple(lst):\n    return tuple(lst)\n\n# Test the function\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n"}
{"task_id": "Mbpp/588", "completion": "\ndef big_diff(lst):\n    return max(lst) - min(lst)\n"}
{"task_id": "Mbpp/589", "completion": "\ndef perfect_squares(low, high):\n    squares = []\n    for i in range(low, high+1):\n        root = i ** 0.5\n        if int(root + 0.5) ** 2 == i:\n            squares.append(i)\n    return squares\n"}
{"task_id": "Mbpp/590", "completion": "\nimport cmath\n\ndef polar_rect(r, theta):\n    rect_x = r * cmath.cos(theta)\n    rect_y = r * cmath.sin(theta)\n    return (rect_x, rect_y)\n\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n"}
{"task_id": "Mbpp/591", "completion": "\ndef swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n"}
{"task_id": "Mbpp/592", "completion": "\ndef binomial_coefficient(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)\n\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(n):\n        sum += binomial_coefficient(n, i) * binomial_coefficient(n, i+1)\n    return sum\n\nassert sum_Of_product(3) == 15\n"}
{"task_id": "Mbpp/593", "completion": "\ndef removezero_ip(ip):\n    return '.'.join(str(int(i)) for i in ip.split('.'))\n\nprint(removezero_ip(\"216.08.094.196\")) # Output: 216.8.94.196\n"}
{"task_id": "Mbpp/594", "completion": "\ndef diff_even_odd(lst):\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i != len(lst) - 1:\n            for j in range(i + 1, len(lst)):\n                if lst[j] % 2 != 0:\n                    return lst[j] - lst[i]\n        elif lst[i] % 2 != 0 and i != len(lst) - 1:\n            for j in range(i + 1, len(lst)):\n                if lst[j] % 2 == 0:\n                    return lst[j] - lst[i]\n    return None\n\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n"}
{"task_id": "Mbpp/595", "completion": "\ndef min_Swaps(a, b):\n    a = list(a)\n    b = list(b)\n    swaps = 0\n    i = 0\n    while i < len(a):\n        if a[i] != b[i]:\n            swap_found = False\n            for j in range(i+1, len(a)):\n                if a[j] == b[i]:\n                    a[i], a[j] = a[j], a[i]\n                    swaps += 1\n                    swap_found = True\n                    break\n            if not swap_found:\n                for j in range(i+1, len(a)):\n                    if a[j] == '1':\n                        a[i], a[j] = a[j], a[i]\n                        swaps += 1\n                        swap_found = True\n                        break\n        i += 1\n    return swaps\n\nprint(min_Swaps(\"1101\", \"1110\"))  # Output: 1\n"}
{"task_id": "Mbpp/596", "completion": "\nimport sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n"}
{"task_id": "Mbpp/597", "completion": "\ndef find_kth(nums1, nums2, k):\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    if not nums1:\n        return nums2[k]\n    if k == 1:\n        return min(nums1[0], nums2[0])\n    i, j = min(k // 2, len(nums1)), min(k // 2, len(nums2))\n    if nums1[i - 1] > nums2[j - 1]:\n        return find_kth(nums1, nums2[j:], k - j)\n    else:\n        return find_kth(nums1[i:], nums2, k - i)\n\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n"}
{"task_id": "Mbpp/598", "completion": "\ndef armstrong_number(n):\n    # Number of digits\n    len_n = len(str(n))\n    # Calculate sum of cubes of each digit\n    sum_cubes = sum([int(digit)**len_n for digit in str(n)])\n    # Check if sum is equal to the original number\n    return sum_cubes == n\n"}
{"task_id": "Mbpp/599", "completion": "\ndef sum_average(n):\n    # calculate the sum of first n natural numbers\n    total = n * (n + 1) // 2\n    # calculate the average of first n natural numbers\n    average = total / n\n    return total, average\n"}
{"task_id": "Mbpp/600", "completion": "\ndef is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/602", "completion": "\ndef first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n\nassert first_repeated_char(\"abcabc\") == \"a\"\n"}
{"task_id": "Mbpp/603", "completion": "\ndef get_ludic(n):\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers\n"}
{"task_id": "Mbpp/604", "completion": "\ndef reverse_words(s):\n    return ' '.join(s.split()[::-1])\n\nprint(reverse_words(\"python program\"))  # Output: \"program python\"\n"}
{"task_id": "Mbpp/605", "completion": "\ndef prime_num(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"task_id": "Mbpp/606", "completion": "\nimport math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)\n"}
{"task_id": "Mbpp/607", "completion": "\nimport re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n"}
{"task_id": "Mbpp/608", "completion": "\ndef bell_Number(n):\n    bell = [0, 1]\n    for i in range(2, n+1):\n        bell.append(bell[i-1] + bell[i-2])\n    return bell[n]\n\n# Test the function\nassert bell_Number(2) == 2\n"}
{"task_id": "Mbpp/610", "completion": "\ndef remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]\n"}
{"task_id": "Mbpp/611", "completion": "\ndef max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)\n\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n"}
{"task_id": "Mbpp/612", "completion": "\ndef merge(lst):\n    return [ [sub[0] for sub in lst], [sub[1] for sub in lst] ]\n\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n"}
{"task_id": "Mbpp/614", "completion": "\ndef cummulative_sum(tuples):\n    cum_sum = 0\n    for tup in tuples:\n        cum_sum += sum(tup)\n    return cum_sum\n\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n"}
{"task_id": "Mbpp/615", "completion": "\ndef average_tuple(t):\n    return [sum(x)/len(x) for x in t]\n\nprint(average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))))\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n"}
{"task_id": "Mbpp/616", "completion": "\ndef tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))\n\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n"}
{"task_id": "Mbpp/618", "completion": "\ndef div_list(list1, list2):\n    return [a/b for a, b in zip(list1, list2)]\n"}
{"task_id": "Mbpp/619", "completion": "\ndef move_num(s):\n    nums = [int(i) for i in s if i.isdigit()]\n    str_letters = [i for i in s if not i.isdigit()]\n    return ''.join(str_letters + nums)\n\nprint(move_num('I1love143you55three3000thousand')) # 'Iloveyouthreethousand1143553000'\n"}
{"task_id": "Mbpp/620", "completion": "\ndef largest_subset(lst):\n    if not lst:\n        return 0\n    lst.sort()\n    count = 1\n    i = 1\n    while i < len(lst):\n        if lst[i] % lst[i-1] == 0:\n            count += 1\n            if count == len(lst):\n                return count\n        else:\n            count = 1\n        i += 1\n    return count\n\nprint(largest_subset([1, 3, 6, 13, 17, 18]))  # Output: 4\n"}
{"task_id": "Mbpp/622", "completion": "\ndef get_median(list1, list2, size):\n    merged_list = sorted(list1 + list2)\n    if size % 2 == 0:\n        return (merged_list[size//2] + merged_list[size//2 - 1]) / 2\n    else:\n        return merged_list[size//2]\n\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n"}
{"task_id": "Mbpp/623", "completion": "\ndef nth_nums(nums, n):\n    return [num ** n for num in nums]\n\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"}
{"task_id": "Mbpp/624", "completion": "\ndef is_upper(s):\n    return s.upper()\n\nassert is_upper(\"person\") == \"PERSON\"\n"}
{"task_id": "Mbpp/626", "completion": "\nimport math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return (math.sqrt(2) / 4) * (radius ** 2)\n"}
{"task_id": "Mbpp/628", "completion": "\ndef replace_spaces(s):\n    return s.replace(\" \", \"%20\")\n"}
{"task_id": "Mbpp/629", "completion": "\ndef find_even_numbers(num_list):\n    return [num for num in num_list if num % 2 == 0]\n\ndef Split(num_list):\n    return find_even_numbers(num_list)\n\nassert Split([1,2,3,4,5]) == [2,4]\n"}
{"task_id": "Mbpp/630", "completion": "\ndef get_coordinates(coordinate):\n    x, y = coordinate\n    return [[x-1, y], [x-1, y+1], [x-1, y+2], [x, y-1], [x, y+1], [x, y+2], [x+1, y-1], [x+1, y], [x+1, y+1], [x+1, y+2]]\n\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n"}
{"task_id": "Mbpp/631", "completion": "\ndef replace_spaces(s):\n    return s.replace(' ', '_') if ' ' in s else s.replace('_', ' ')\n"}
{"task_id": "Mbpp/632", "completion": "\ndef move_zero(nums):\n    \"\"\"\n    This function takes a list of numbers as input, \n    moves all the zeroes to the end \n    of the list and returns the updated list.\n    \"\"\"\n    # count the number of zeros\n    num_zeros = nums.count(0)\n    \n    # remove all zeros from the list\n    nums = [num for num in nums if num != 0]\n    \n    # extend the list by the number of zeros\n    nums.extend([0]*num_zeros)\n    \n    return nums\n"}
{"task_id": "Mbpp/633", "completion": "\ndef pair_xor_Sum(nums, x):\n    sum_xor = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sum_xor += nums[i] ^ nums[j]\n    return sum_xor + x\n\nassert pair_xor_Sum([5,9,7,6],4) == 47\n"}
{"task_id": "Mbpp/635", "completion": "\ndef heap_sort(arr):\n    n = len(arr)\n\n    # Build a maxheap\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    # One by one extract elements\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # swap\n        heapify(arr, i, 0)\n\n    return arr\n\ndef heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    # See if left child of root exists and is greater than root\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    # See if right child of root exists and is greater than root\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    # Change root, if needed\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # swap\n        heapify(arr, n, largest)\n"}
{"task_id": "Mbpp/637", "completion": "\ndef noprofit_noloss(cost_price, selling_price):\n    if cost_price == selling_price:\n        return False\n    elif cost_price > selling_price:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/638", "completion": "\nimport math\n\ndef wind_chill(velocity, temperature):\n    wci = 13.12 + 0.6215*temperature -  11.37*math.pow(velocity, 0.16) + 0.3965*temperature*math.pow(velocity, 0.16)\n    return math.ceil(wci)\n\nassert wind_chill(120,35)==40\n"}
{"task_id": "Mbpp/639", "completion": "\ndef sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())\n\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n"}
{"task_id": "Mbpp/640", "completion": "\ndef remove_parenthesis(s):\n    start = s.find(\"(\")\n    end = s.find(\")\")\n    if start != -1 and end != -1:\n        return s[:start] + s[end+1:]\n    return s\n\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n"}
{"task_id": "Mbpp/641", "completion": "\ndef nth_nonagonal(n):\n    return n * (7 * n - 5) // 2\n\ndef is_nonagonal(n):\n    return nth_nonagonal(n)\n\nassert is_nonagonal(10) == 325\n"}
{"task_id": "Mbpp/643", "completion": "\ndef text_match_wordz_middle(word):\n    if 'z' in word[1:-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/644", "completion": "\ndef reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]\n\n# Test\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n"}
{"task_id": "Mbpp/720", "completion": "\ndef add_dict_to_tuple(tup, dic):\n    return tup + (dic,)\n\nprint(add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3}))\n"}
{"task_id": "Mbpp/721", "completion": "\ndef maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    # Initialize the first row\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    # Initialize the first column\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n\n    # Fill in the rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    return dp[n-1][n-1] / (n*n)\n\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n"}
{"task_id": "Mbpp/722", "completion": "\ndef filter_data(data, min_height, min_weight):\n    return {name: values for name, values in data.items() if values[0] > min_height and values[1] > min_weight}\n\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n"}
{"task_id": "Mbpp/723", "completion": "\ndef count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/724", "completion": "\ndef power_base_sum(base, power):\n    # Calculate the sum of all digits of the base to the power\n    result = sum(int(digit) for digit in str(base ** power))\n    return result\n\n# Test the function\nassert power_base_sum(2,100)==115\n"}
{"task_id": "Mbpp/725", "completion": "\nimport re\n\ndef extract_quotation(s):\n    return re.findall(r'\"([^\"]*)\"', s)\n\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n"}
{"task_id": "Mbpp/726", "completion": "\ndef multiply_elements(numbers):\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i] * numbers[i + 1])\n    return tuple(result)\n\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n"}
{"task_id": "Mbpp/728", "completion": "\ndef sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]\n\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n"}
{"task_id": "Mbpp/730", "completion": "\ndef consecutive_duplicates(lst):\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result\n"}
{"task_id": "Mbpp/731", "completion": "\nimport math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * (r + h)\n\nassert lateralsurface_cone(5,12)==204.20352248333654\n"}
{"task_id": "Mbpp/732", "completion": "\ndef replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n"}
{"task_id": "Mbpp/733", "completion": "\ndef find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            if mid == 0 or arr[mid-1] < target:\n                return mid\n            right = mid - 1\n    return -1\n"}
{"task_id": "Mbpp/734", "completion": "\ndef sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            result += product\n    return result\n\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n"}
{"task_id": "Mbpp/735", "completion": "\ndef toggle_middle_bits(n):\n    # convert number into binary then into string\n    binary = bin(n)[2:]\n\n    # if number has less than 3 bits - do nothing\n    if len(binary) < 3:\n        return n\n\n    # convert all middle bits to the opposite (0->1 and 1->0)\n    binary = binary[0] + ''.join('1' if bit == '0' else '0' for bit in binary[1:-1]) + binary[-1]\n\n    # convert binary back to decimal\n    result = int(binary, 2)\n\n    return result\n"}
{"task_id": "Mbpp/736", "completion": "\ndef left_insertion(lst, val):\n    left_point = 0\n    right_point = len(lst) - 1\n\n    while left_point <= right_point:\n        mid_point = (left_point + right_point) // 2\n\n        if lst[mid_point] < val:\n            left_point = mid_point + 1\n        else:\n            right_point = mid_point - 1\n\n    return left_point\n\nassert left_insertion([1,2,4,5],6)==4\n"}
{"task_id": "Mbpp/737", "completion": "\nimport re\n\ndef check_str(s):\n    pattern = '^[aeiou]'\n    if re.match(pattern, s):\n        return True\n    else:\n        return False\n\n# Test the function\nassert check_str(\"annie\")\n"}
{"task_id": "Mbpp/739", "completion": "\ndef find_Index(n):\n    x = 1\n    index = 1\n    while len(str(x)) < n:\n        x = x + index\n        index += 1\n    return index\n\nassert find_Index(2) == 4\n"}
{"task_id": "Mbpp/740", "completion": "\ndef tuple_to_dict(tup):\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup), 2)}\n\n\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n"}
{"task_id": "Mbpp/741", "completion": "\ndef all_Characters_Same(s):\n    return len(set(s)) == 1\n"}
{"task_id": "Mbpp/742", "completion": "\nimport math\n\ndef area_tetrahedron(edge_length):\n    return (math.sqrt(3) / 12) * edge_length ** 2\n\n# Test the function\nassert area_tetrahedron(3)==15.588457268119894\n"}
{"task_id": "Mbpp/743", "completion": "\ndef rotate_right(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]\n\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n"}
{"task_id": "Mbpp/744", "completion": "\ndef check_none(input_tuple):\n    for item in input_tuple:\n        if item is None:\n            return True\n    return False\n\n# Test the function\nassert check_none((10, 4, 5, 6, None)) == True\n"}
{"task_id": "Mbpp/745", "completion": "\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for number in range(startnum, endnum + 1):\n        number_as_string = str(number)\n        is_divisible_by_all_digits = all(int(digit) == 0 or number % int(digit) == 0 for digit in number_as_string)\n        if is_divisible_by_all_digits:\n            result.append(number)\n    return result\n\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n"}
{"task_id": "Mbpp/746", "completion": "\nimport math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle/360.0) * math.pi * radius**2\n\nassert sector_area(4,45)==6.283185307179586\n"}
{"task_id": "Mbpp/748", "completion": "\ndef capital_words_spaces(s):\n    words = s.split()\n    new_words = [word.capitalize() if word[0].isupper() else word for word in words]\n    return ' '.join(new_words)\n\nassert capital_words_spaces(\"Python\") == 'Python'\n"}
{"task_id": "Mbpp/749", "completion": "\ndef sort_numeric_strings(lst):\n    return sorted(lst, key=lambda x: int(x))\n\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n"}
{"task_id": "Mbpp/750", "completion": "\ndef add_tuple(lst, tpl):\n    return lst + list(tpl)\n\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n"}
{"task_id": "Mbpp/751", "completion": "\ndef check_min_heap(arr):\n    n = len(arr)\n\n    # Iterate through the array from the parent nodes to check the heap property\n    for i in range(int(n/2)):\n        # If left child is greater than parent\n        if arr[i] > arr[2 * i + 1] :\n            return False\n        # If right child exists and is greater than parent\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n\n    return True\n"}
{"task_id": "Mbpp/752", "completion": "\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b\n\nassert jacobsthal_num(5) == 11\n"}
{"task_id": "Mbpp/753", "completion": "\ndef min_k(lst, k):\n    return sorted(lst, key=lambda x: x[1])[:k]\n\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n"}
{"task_id": "Mbpp/754", "completion": "\ndef extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n"}
{"task_id": "Mbpp/755", "completion": "\ndef second_smallest(numbers):\n    first, second = float('inf'), float('inf')\n    for n in numbers:\n        if n <= first:\n            first, second = n, first\n        elif n < second:\n            second = n\n    return second\n"}
{"task_id": "Mbpp/757", "completion": "\ndef count_reverse_pairs(strs):\n    pairs = 0\n    for i in range(len(strs)):\n        for j in range(i+1, len(strs)):\n            if strs[i] == strs[j][::-1]:\n                pairs += 1\n    return pairs\n\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n"}
{"task_id": "Mbpp/758", "completion": "\ndef unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict\n"}
{"task_id": "Mbpp/759", "completion": "\ndef is_decimal(s):\n    try:\n        float(s)\n        if s.count('.') == 1:\n            if len(s[s.index('.'):]) <= 3:\n                return True\n        elif s.count('.') == 0:\n            if len(s) <= 3:\n                return True\n        else:\n            return False\n    except ValueError:\n        return False\n\nassert is_decimal('123.11')==True\n"}
{"task_id": "Mbpp/760", "completion": "\ndef unique_Element(lst):\n    if len(set(lst)) == 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/762", "completion": "\ndef check_monthnumber_number(month_number):\n    thirty_days_months = [4, 6, 9, 11]\n    return month_number in thirty_days_months\n"}
{"task_id": "Mbpp/763", "completion": "\ndef find_min_diff(arr, x):\n    arr.sort()\n    n = len(arr)\n    i, j = 0, n-1\n    min_diff = float('inf')\n\n    while i < j:\n        if arr[i] + x < arr[j]:\n            i += 1\n        elif arr[i] + x > arr[j]:\n            j -= 1\n        else:\n            min_diff = min(min_diff, arr[i] - arr[j])\n            i += 1\n            j -= 1\n\n    return min_diff\n\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n"}
{"task_id": "Mbpp/764", "completion": "\ndef number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count\n\nassert number_ctr('program2bedone') == 1\n"}
{"task_id": "Mbpp/765", "completion": "\ndef is_polite(n):\n    polite_numbers = [1, 2, 4, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return polite_numbers[n-1]\n\nassert is_polite(7) == 11\n"}
{"task_id": "Mbpp/766", "completion": "\ndef pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n"}
{"task_id": "Mbpp/767", "completion": "\ndef get_pairs_count(numbers, target_sum):\n    count = 0\n    seen = set()\n    for num in numbers:\n        complement = target_sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count\n\nassert get_pairs_count([1,1,1,1],2) == 6\n"}
{"task_id": "Mbpp/769", "completion": "\ndef Diff(list1, list2):\n    diff_list = []\n    for i in list1:\n        if i not in list2:\n            diff_list.append(i)\n    for j in list2:\n        if j not in list1:\n            diff_list.append(j)\n    return diff_list\n\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n"}
{"task_id": "Mbpp/770", "completion": "\ndef odd_num_sum(n):\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    return sum\n\nprint(odd_num_sum(2))  # Output: 82\n"}
{"task_id": "Mbpp/771", "completion": "\ndef check_expression(expression):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or mapping[char] != stack.pop():\n                return False\n\n    return not stack\n\n\nassert check_expression(\"{()}[{}]\") == True\n"}
{"task_id": "Mbpp/772", "completion": "\ndef remove_length(s, k):\n    words = s.split()\n    new_words = [word for word in words if len(word) != k]\n    return ' '.join(new_words)\n\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n"}
{"task_id": "Mbpp/773", "completion": "\ndef occurance_substring(main_string, substring):\n    position = main_string.find(substring)\n    if position == -1:\n        return None\n    else:\n        return substring, position, position + len(substring)\n\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n"}
{"task_id": "Mbpp/775", "completion": "\ndef odd_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/777", "completion": "\ndef find_sum(lst):\n    counts = {}\n    for num in lst:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    return sum(num for num, count in counts.items() if count == 1)\n\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n"}
{"task_id": "Mbpp/778", "completion": "\ndef pack_consecutive_duplicates(lst):\n    result = []\n    current = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            if current:\n                result.append(current)\n            current = [lst[i]]\n        else:\n            current.append(lst[i])\n    if current:\n        result.append(current)\n    return result\n"}
{"task_id": "Mbpp/780", "completion": "\nfrom itertools import combinations\n\ndef find_combinations(tup_list):\n    res = []\n    for tup in tup_list:\n        for i in range(1, len(tup_list)):\n            for comb in combinations(tup_list, i):\n                if sum(tup) == sum(comb):\n                    res.append(comb)\n    return res\n\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n"}
{"task_id": "Mbpp/781", "completion": "\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n"}
{"task_id": "Mbpp/782", "completion": "\ndef odd_length_sum(arr):\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            total_sum += arr[i]\n            if j-i > 1:\n                total_sum += arr[j]\n    return total_sum\n\nassert odd_length_sum([1,2,4]) == 14\n"}
{"task_id": "Mbpp/783", "completion": "\ndef rgb_to_hsv(r, g, b):\n    # Normalizing the rgb values\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Getting the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculating the difference\n    diff = max_val - min_val\n\n    # Calculating the hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (60 * ((g - b) / diff) + 360) % 360\n    elif max_val == g:\n        hue = (60 * ((b - r) / diff) + 120) % 360\n    elif max_val == b:\n        hue = (60 * ((r - g) / diff) + 240) % 360\n\n    # Calculating the saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (diff / max_val) * 100\n\n    # Calculating the brightness\n    brightness = max_val * 100\n\n    return round(hue, 2), round(saturation, 2), round(brightness, 2)\n\n\n# Testing the function\nassert rgb_to_hsv(255, 255, 255) == (0, 0.0, 100.0)\n"}
{"task_id": "Mbpp/784", "completion": "\ndef mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                even *= num\n        else:\n            if odd is None:\n                odd = num\n            else:\n                odd *= num\n    return even * odd\n"}
{"task_id": "Mbpp/785", "completion": "\ndef tuple_str_int(tup_str):\n    # Remove the parentheses\n    tup_str = tup_str.replace(\"(\", \"\").replace(\")\", \"\")\n    # Split the string by comma and convert each element to integer\n    tup = tuple(int(i) for i in tup_str.split(\",\"))\n    return tup\n"}
{"task_id": "Mbpp/786", "completion": "\ndef right_insertion(lst, val):\n    for i in range(len(lst)):\n        if lst[i] > val:\n            return i\n    return len(lst)\n\nassert right_insertion([1,2,4,5],6)==4\n"}
{"task_id": "Mbpp/787", "completion": "\ndef text_match_three(s):\n    return s == \"abbb\"\n"}
{"task_id": "Mbpp/788", "completion": "\ndef new_tuple(lst, string):\n    return tuple(lst + [string])\n\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n"}
{"task_id": "Mbpp/790", "completion": "\ndef even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/791", "completion": "\ndef remove_nested(tup):\n    result = []\n    for i in tup:\n        if not isinstance(i, tuple):\n            result.append(i)\n        else:\n            result.extend(remove_nested(i))\n    return tuple(result)\n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n"}
{"task_id": "Mbpp/792", "completion": "\ndef count_list(lists):\n    return len(lists)\n\n# Test the function\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n"}
{"task_id": "Mbpp/793", "completion": "\ndef last(arr, num):\n    pos = -1\n    for i in range(len(arr)):\n        if arr[i] == num:\n            pos = i\n    return pos \n\nassert last([1,2,3],1) == 0\n"}
{"task_id": "Mbpp/794", "completion": "\ndef text_starta_endb(s):\n    return s.startswith('a') and s.endswith('b')\n"}
{"task_id": "Mbpp/796", "completion": "\ndef return_sum(dic):\n    return sum(dic.values())\n\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n"}
{"task_id": "Mbpp/797", "completion": "\ndef sum_in_range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 != 0)\n"}
{"task_id": "Mbpp/798", "completion": "\ndef _sum(arr):\n    return sum(arr)\n"}
{"task_id": "Mbpp/799", "completion": "\ndef left_rotate(n, d):\n    return (n << d)|(n >> (32 - d))\n\nassert left_rotate(16,2) == 64\n"}
{"task_id": "Mbpp/800", "completion": "\ndef remove_all_spaces(s):\n    return s.replace(' ', '')\n"}
{"task_id": "Mbpp/801", "completion": "\ndef test_three_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count\n"}
{"task_id": "Mbpp/803", "completion": "\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    x = n // 2\n    while x * x != n:\n        x = (x + (n // x)) // 2\n        if x * x < n:\n            return False\n    return True\n\nassert not is_perfect_square(10)\n"}
{"task_id": "Mbpp/804", "completion": "\ndef is_product_even(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product % 2 == 0\n"}
{"task_id": "Mbpp/805", "completion": "\ndef max_sum_list(lst):\n    return max(lst, key=sum)\n"}
{"task_id": "Mbpp/806", "completion": "\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run\n"}
{"task_id": "Mbpp/807", "completion": "\ndef first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n"}
{"task_id": "Mbpp/808", "completion": "\ndef check_K(tuples, k):\n    return k in tuples\n\nassert check_K((10, 4, 5, 6, 8), 6) == True\n"}
{"task_id": "Mbpp/809", "completion": "\ndef check_smaller(tuple1, tuple2):\n    for a, b in zip(tuple1, tuple2):\n        if a >= b:\n            return False\n    return True\n"}
